
> veritak-financial-platform@1.0.0 dev
> next dev -p 3000

   ▲ Next.js 15.5.3
   - Local:        http://localhost:3000
   - Network:      http://10.0.0.54:3000
   - Environments: .env

 ✓ Starting...
 ✓ Ready in 1074ms


Source path: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/app/globals.css
Setting up new context...
Finding changed files: 6.35ms
 ○ Compiling / ...
Reading changed files: 545.708ms
Sorting candidates: 22.761ms
Generate rules: 123.065ms
Build stylesheet: 1.145ms
Potential classes:  50821
Active contexts:  1
JIT TOTAL: 773.921ms


 ✓ Compiled / in 1521ms (645 modules)
 GET / 200 in 1758ms


Source path: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/app/globals.css
Finding changed files: 5.484ms
Reading changed files: 0.004ms
Sorting candidates: 0.003ms
Generate rules: 0.029ms
Build stylesheet: 0.001ms
Potential classes:  1
Active contexts:  1
JIT TOTAL: 13.138ms


 ✓ Compiled in 280ms (251 modules)
 ✓ Compiled in 16ms (237 modules)
 ✓ Compiled /admin in 326ms (652 modules)
 GET /admin 200 in 492ms
 ✓ Compiled /api/admin/ml-feature-toggles in 288ms (893 modules)
🔗 Initializing Redis connection to localhost:6379
✅ Loaded data source states from persistent storage: [
  'sec_edgar',
  'treasury',
  'fred',
  'bls',
  'eia',
  'yahoo',
  'polygon',
  'twelvedata'
]
🔧 Admin access granted in development mode
🔗 Initializing Redis connection to localhost:6379
✅ Redis connected successfully
✅ Redis connected successfully
🚀 Redis ready for operations
🚀 Redis ready for operations
✅ Loaded ML feature: Early Signal Detection (current: enabled)
✅ Loaded ML feature: Price Prediction (current: enabled)
✅ Loaded ML feature: Sentiment-Fusion Price Prediction (current: enabled)
 GET /api/admin/ml-feature-toggles 200 in 1451ms
 ✓ Compiled /api/stocks/search in 135ms (895 modules)
🔗 Initializing Redis connection to localhost:6379
🔍 Stock search request: "AAPL"
📡 Cache MISS - fetching from FMP API for: "AAPL"
✅ Redis connected successfully
🚀 Redis ready for operations
✅ Found 15 results for "AAPL" (cached for 5 min)
 GET /api/stocks/search?query=AAPL 200 in 444ms
 ⚠ ./app/services/ml/sentiment-fusion/SentimentFusionService.ts
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
./app/services/ml/sentiment-fusion/SentimentFusionService.ts
./app/services/stock-selection/StockSelectionService.ts
./app/services/stock-selection/MLEnhancedStockSelectionService.ts
./app/api/stocks/analyze/route.ts
🔗 Initializing Redis connection to localhost:6379
[2025-10-10T17:24:08.626Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T17:24:08.626Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
[2025-10-10T17:24:08.651Z] INFO [ModelCache] ModelCache initialized
Metadata: {
  "config": {
    "maxCachedModels": 5,
    "enableLRU": true,
    "maxLoadTimeMs": 50,
    "enableMetrics": true,
    "warmCacheOnStartup": false
  }
}
🔬 Starting comprehensive analysis via StockSelectionService...
📦 Request body keys: [ 'mode', 'limit', 'include_ml', 'ml_horizon', 'symbols', 'sessionId' ]
📦 Raw sessionId from body: session_1760117048082_by7b17sco
🎯 Validated sessionId: session_1760117048082_by7b17sco
🎯 SessionId type: string
✅ Initializing ProgressTracker for session: session_1760117048082_by7b17sco
📊 Progress update: init 1%
✅ Started 'init' stage
📊 Progress update: init 1%
🔗 Initializing Redis connection to localhost:6379
[2025-10-10T17:24:08.675Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T17:24:08.675Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
✅ ESG Data Service initialized with API key
🏭 MacroeconomicAnalysisService initialized with data source orchestration
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
✅ ESG Data Service initialized with API key
✅ Short Interest Service initialized with Polygon API integration
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
🔗 Initializing Redis connection to localhost:6379
✅ ESG Data Service initialized with API key
[2025-10-10T17:24:08.677Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T17:24:08.677Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
🔗 Initializing Redis connection to localhost:6379
[2025-10-10T17:24:08.678Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T17:24:08.678Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
[2025-10-10T17:24:08.678Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T17:24:08.678Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
[2025-10-10T17:24:08.679Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T17:24:08.679Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
[2025-10-10T17:24:08.679Z] INFO [PredictionLogger] PredictionLogger initialized
[2025-10-10T17:24:08.679Z] INFO [MLEnhancedStockSelectionService] MLEnhancedStockSelectionService initialized with prediction logging
✅ Comprehensive MLEnhancedStockSelectionService initialized (Phase 4.1 - ML enhancement layer active)
📊 Progress update: init 2%
🔗 Initializing Redis connection to localhost:6379
 ○ Compiling /api/stocks/analyze/progress/[sessionId] ...
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
[2025-10-10T17:24:08.689Z] DEBUG [api.historical-cache] Historical cache directories initialized
Metadata: {
  "baseDir": "/Users/michaellocke/WebstormProjects/Home/public/vfr-api/data/cache/historical"
}
📡 SSE connection established for session: session_1760117048082_by7b17sco
✅ SSE session session_1760117048082_by7b17sco initialized
✅ Loaded ML feature: Early Signal Detection (current: enabled)
✅ Loaded ML feature: Price Prediction (current: enabled)
✅ Loaded ML feature: Sentiment-Fusion Price Prediction (current: enabled)
🔍 /api/stocks/analyze - ESD Toggle: true, Sentiment-Fusion Toggle: true, ML Enhancement: true
📊 Executing comprehensive stock analysis: {
  mode: 'single_stock',
  symbols: [ 'AAPL' ],
  sector: undefined,
  requestId: 'admin_test_1760117049686_dw7h4wcaz',
  withProgressTracking: true
}
[2025-10-10T17:24:09.687Z] INFO [MLEnhancedStockSelectionService] ML enhancement enabled for request: AAPL
[2025-10-10T17:24:09.687Z] INFO [RealTimePredictionEngine] Initializing RealTimePredictionEngine
[2025-10-10T17:24:09.698Z] INFO [ModelRegistry] ModelRegistry initialized successfully
[2025-10-10T17:24:09.705Z] INFO [FeatureStore] FeatureStore initialized successfully
[2025-10-10T17:24:09.705Z] INFO [RealTimePredictionEngine] RealTimePredictionEngine initialized successfully
🔍 executeSingleStockAnalysis START
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
🔍 Cache check for AAPL: MISS
🔍 No cache or price invalidated, proceeding with fresh analysis for AAPL
Redis connected
Fetching configuration composite from database
Creating default composite algorithm configuration WITH SINGLE COMPOSITE FACTOR
🔧 Building customized config for: composite
📋 Base config keys: [
  'id',
  'name',
  'description',
  'type',
  'enabled',
  'selectionCriteria',
  'universe',
  'weights',
  'selection',
  'risk',
  'dataFusion',
  'metadata'
]
🌌 Base universe: { maxPositions: 40, marketCapMin: 500000000 }
✅ Universe config built successfully: { maxPositions: 1, marketCapMin: 500000000, excludeSymbols: [] }
No data sources available in service config, using default
Using symbols from context: [AAPL]
Algorithm Composite Analysis Algorithm: Evaluating 1 stocks
📊 Progress update: market_data 5%
📊 Using optimized batch size: 10 (FMP Starter: true)
Fetching fresh market data for AAPL...
[2025-10-10T17:24:09.716Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:09.717Z] DEBUG [FinancialDataService] Optimal source selection for stock_price
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:09.717Z] DEBUG [FinancialDataService] Trying Financial Modeling Prep for AAPL
[2025-10-10T17:24:09.717Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getStockPrice
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:09.720Z] DEBUG [FinancialDataService] Starting API call: getMarketData
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:09.720Z] DEBUG [FinancialDataService] Optimal source selection for market_data
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:09.720Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getMarketData
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:09.721Z] DEBUG [FinancialDataService] Starting API call: getCompanyInfo
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:09.722Z] DEBUG [FinancialDataService] Optimal source selection for company_info
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:09.722Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getCompanyInfo
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:09.823Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 106ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 106,
  "attempts": 1
}
[2025-10-10T17:24:09.824Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 107ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 107,
  "symbol": "AAPL",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:24:09.824Z] DEBUG [FMPCacheManager] Cache entry set for fmp:stock_price:AAPL
Metadata: {
  "dataType": "stock_price",
  "ttl": "60s",
  "compressed": false,
  "size": "0.3KB"
}
[2025-10-10T17:24:09.824Z] DEBUG [FinancialDataService] Stock price cached for AAPL
Metadata: {
  "ttl": "60s"
}
[2025-10-10T17:24:09.824Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 108ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 108,
  "attempts": 1
}
[2025-10-10T17:24:09.825Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getMarketData completed in 105ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getMarketData",
  "duration": 105,
  "attempts": 1
}
[2025-10-10T17:24:09.825Z] DEBUG [FinancialDataService] Performance: getMarketData completed in 105ms
Metadata: {
  "type": "performance",
  "operation": "getMarketData",
  "duration": 105,
  "attempts": 1
}
[2025-10-10T17:24:09.826Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getCompanyInfo completed in 104ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getCompanyInfo",
  "duration": 104,
  "attempts": 1
}
[2025-10-10T17:24:09.826Z] DEBUG [FinancialDataService] Performance: getCompanyInfo completed in 105ms
Metadata: {
  "type": "performance",
  "operation": "getCompanyInfo",
  "duration": 105,
  "attempts": 1
}
Got stock data for AAPL: price=247.72, volume=29018984
✅ Market data fetched for 1/1 symbols (100.0% success rate)
Fetched market data for 1 stocks
📊 Progress update: market_data 7%
📊 Progress update: fundamentals 12%
[2025-10-10T17:24:09.828Z] DEBUG [FinancialDataService] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:09.829Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getFundamentalRatios
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:09.829Z] DEBUG [api.financial-modeling-prep] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 15000,
  "retries": 2
}
[2025-10-10T17:24:09.869Z] WARN [api.financial-modeling-prep] Invalid ratios response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "AAPL"
}
[2025-10-10T17:24:09.869Z] WARN [api.financial-modeling-prep] Invalid metrics response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "AAPL"
}
[2025-10-10T17:24:09.869Z] WARN [api.financial-modeling-prep] Invalid pegRatio value for AAPL
Metadata: {
  "fieldName": "pegRatio",
  "value": -46.988617,
  "errors": [
    "Negative values not allowed",
    "Value must be at least 0"
  ]
}
[2025-10-10T17:24:09.870Z] DEBUG [api.financial-modeling-prep] Performance: getFundamentalRatios completed in 41ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 41,
  "attempts": 1
}
[2025-10-10T17:24:09.870Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getFundamentalRatios completed in 41ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getFundamentalRatios",
  "duration": 41,
  "attempts": 1
}
[2025-10-10T17:24:09.870Z] INFO [FinancialDataService] Fundamental ratios from Financial Modeling Prep for AAPL
Metadata: {
  "peRatio": "38.14",
  "pbRatio": "62.78",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:24:09.870Z] DEBUG [FinancialDataService] Performance: getFundamentalRatios completed in 42ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 42,
  "attempts": 1
}
[2025-10-10T17:24:09.870Z] DEBUG [FMPCacheManager] Cache entry set for fmp:fundamental_ratios:AAPL
Metadata: {
  "dataType": "fundamental_ratios",
  "ttl": "3600s",
  "compressed": false,
  "size": "0.8KB"
}
[2025-10-10T17:24:09.870Z] DEBUG [FinancialDataService] Cached fundamental ratios for AAPL
[2025-10-10T17:24:09.871Z] DEBUG [FinancialDataService] Starting API call: getCompanyInfo
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:09.871Z] DEBUG [FinancialDataService] Optimal source selection for company_info
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 3
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:09.871Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getCompanyInfo
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:09.905Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getCompanyInfo completed in 34ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getCompanyInfo",
  "duration": 34,
  "attempts": 1
}
[2025-10-10T17:24:09.905Z] DEBUG [FinancialDataService] Performance: getCompanyInfo completed in 34ms
Metadata: {
  "type": "performance",
  "operation": "getCompanyInfo",
  "duration": 34,
  "attempts": 1
}
Fetched fundamental data for 1 stocks
📊 Progress update: fundamentals 17%
📊 Progress update: technical 21%
Processing symbol AAPL, marketData keys: [AAPL]
Calculating score for AAPL with market data: { price: 247.72, volume: 29018984 }
Starting score calculation for AAPL, weights count: 1
🎯 COMPOSITE ALGORITHM DETECTED - Using enhanced composite factor calculation
📊 Progress update: technical 25%
📊 Progress update: analyst 28%
[2025-10-10T17:24:09.940Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
[2025-10-10T17:24:09.941Z] INFO [FinancialDataService] Analyst ratings from FMP for AAPL
Metadata: {
  "consensus": "Buy",
  "totalAnalysts": 109
}
📊 Analyst data pre-fetched for sentiment: Buy (109 analysts, 3.6/5)
📊 Progress update: analyst 30%
🚀 Fetching AAPL data from 7 sources in parallel...
📊 Progress update: sentiment 36%
📰 Pre-fetching sentiment data for AAPL...
📊 Progress update: vwap 39%
📊 Pre-fetching VWAP analysis for AAPL...
📊 Progress update: macro 43%
🌍 Pre-fetching macroeconomic context for AAPL (Technology)...
📊 Progress update: esg 46%
🌱 Pre-fetching ESG data for AAPL (Technology)...
📊 Progress update: short_interest 49%
📊 Pre-fetching short interest data for AAPL (Technology)...
📊 Progress update: extended_hours 51%
🕒 Pre-fetching extended market data for AAPL...
📊 Progress update: options 61%
📊 Pre-fetching options data for AAPL...
📊 Progress update: options 61%
✅ ESG Data Service initialized with API key
🌱 Analyzing ESG impact for AAPL (Technology)
✅ Short Interest Service initialized with Polygon API integration
📊 Analyzing short interest impact for AAPL (Technology)
🔗 Initializing Redis connection to localhost:6379
📊 Progress update: options 61%
🦄 EODHD: Fetching UnicornBay options analysis for AAPL
🦄 EODHD UnicornBay: Fetching enhanced options chain for AAPL
🦄 EODHD UnicornBay: Constructed URL for AAPL: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=AAPL&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🔗 EODHD API: Fetching options chain for AAPL
🦄 Attempting UnicornBay enhanced options data for AAPL
🦄 EODHD UnicornBay: Fetching enhanced options chain for AAPL
🦄 EODHD UnicornBay: Constructed URL for AAPL: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=AAPL&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🔗 Initializing Redis connection to localhost:6379
📰 Sentiment pre-fetched for AAPL: 0.5881260842200318
📊 Progress update: sentiment 67%
🔍 Fetching fresh macroeconomic context with parallel processing...
🔍 Getting latest observation for PET.RWTC.D...
🔍 Getting latest observation for PET.RBRTE.D...
🔍 Getting latest observation for NG.RNGWHHD.D...
🔍 Getting latest observation for PET.EMM_EPMR_PTE_NUS_DPG.W...
📊 Short interest data for AAPL retrieved from cache
📊 Short interest pre-fetched for AAPL: score 0.501, impact neutral
📊 Progress update: short_interest 70%
🌱 ESG pre-fetched for AAPL: 0.810
📊 Progress update: esg 73%
✅ Historical cache HIT: AAPL latest
✅ Historical cache HIT: AAPL latest
📊 Returning cached economic context
🔍 Analyzing inflation trends...
📊 Returning cached monetary policy context
📊 Returning cached economic cycle position
📦 BLS cache HIT for LNS14000000 (TTL: 43200s)
📦 BLS cache HIT for LNS14000000 (TTL: 43200s)
🔄 EIA cache MISS for seriesid/PET.RWTC.D - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/PET.RWTC.D?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
🔄 EIA cache MISS for seriesid/PET.RBRTE.D - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/PET.RBRTE.D?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
🔄 EIA cache MISS for seriesid/NG.RNGWHHD.D - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/NG.RNGWHHD.D?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
🔄 EIA cache MISS for seriesid/PET.EMM_EPMR_PTE_NUS_DPG.W - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/PET.EMM_EPMR_PTE_NUS_DPG.W?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
Unemployment trend analysis completed in 10ms
📦 FRED cache HIT for CPIAUCSL (TTL: 43200s)
📦 BLS cache HIT for CES0000000001 (TTL: 43200s)
📦 FRED cache HIT for PPIACO (TTL: 43200s)
📦 BLS cache HIT for LNS12300000 (TTL: 43200s)
🔄 FRED cache MISS for FEDFUNDS - fetching from API
🌐 FRED API URL: https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key=e093a281de7f0d224ed51ad0842fc393&file_type=json&limit=5&sort_order=desc
✅ Redis connected successfully
✅ Redis connected successfully
📦 BLS cache HIT for CES0000000001 (TTL: 43200s)
Payroll momentum analysis completed in 2ms
Employment strength scoring completed in 14ms
🚀 Redis ready for operations
🚀 Redis ready for operations
📊 VWAP pre-fetched for AAPL: success
📊 Progress update: vwap 76%
🕒 Extended market data pre-fetched for AAPL: market-hours
📊 Progress update: extended_hours 78%
💾 Cached FRED data for FEDFUNDS (TTL: 1800s)
✅ Inflation analysis complete: moderate environment, stable outlook
💾 Cached EIA data for seriesid/PET.RWTC.D (TTL: 3600s)
📊 Response for PET.RWTC.D: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for PET.RWTC.D: {
  period: '2025-10-06',
  duoarea: 'YCUOK',
  'area-name': 'NA',
  product: 'EPCWTI',
  'product-name': 'WTI Crude Oil',
  process: 'PF4',
  'process-name': 'Spot Price FOB',
  series: 'RWTC',
  'series-description': 'Cushing, OK WTI Spot Price FOB (Dollars per Barrel)',
  value: 62.49,
  units: '$/BBL'
}
✅ Loaded data source states from persistent storage: [
  'sec_edgar',
  'treasury',
  'fred',
  'bls',
  'eia',
  'yahoo',
  'polygon',
  'twelvedata'
]
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 52ms
🦄 EODHD UnicornBay: Response structure for AAPL: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for AAPL: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 82 current contracts for AAPL
✅ EODHD UnicornBay: Retrieved 53 calls, 29 puts for AAPL
✅ Using UnicornBay enhanced data for AAPL
📋 Memory optimization: 0.0% reduction
🔗 EODHD Optimized options chain for AAPL: 2891ms
🦄 EODHD UnicornBay: Response structure for AAPL: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for AAPL: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 82 current contracts for AAPL
✅ EODHD UnicornBay: Retrieved 53 calls, 29 puts for AAPL
✅ EODHD UnicornBay: Retrieved 53 calls, 29 puts for AAPL
📊 EODHD UnicornBay: Fetching enhanced put/call ratio for AAPL
🦄 EODHD UnicornBay: Fetching enhanced options chain for AAPL
🦄 EODHD UnicornBay: Constructed URL for AAPL: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=AAPL&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
💾 Cached EIA data for seriesid/PET.RBRTE.D (TTL: 3600s)
📊 Response for PET.RBRTE.D: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for PET.RBRTE.D: {
  period: '2025-10-06',
  duoarea: 'ZEU',
  'area-name': 'NA',
  product: 'EPCBRENT',
  'product-name': 'UK Brent Crude Oil',
  process: 'PF4',
  'process-name': 'Spot Price FOB',
  series: 'RBRTE',
  'series-description': 'Europe Brent Spot Price FOB (Dollars per Barrel)',
  value: 67.09,
  units: '$/BBL'
}
💾 Cached EIA data for seriesid/NG.RNGWHHD.D (TTL: 3600s)
📊 Response for NG.RNGWHHD.D: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for NG.RNGWHHD.D: {
  period: '2025-10-06',
  duoarea: 'RGC',
  'area-name': 'NA',
  product: 'EPG0',
  'product-name': 'Natural Gas',
  process: 'PS0',
  'process-name': 'Spot Price',
  series: 'RNGWHHD',
  'series-description': 'Henry Hub Natural Gas Spot Price (Dollars per Million Btu)',
  value: 3.32,
  units: '$/MMBTU'
}
💾 Cached EIA data for seriesid/PET.EMM_EPMR_PTE_NUS_DPG.W (TTL: 3600s)
📊 Response for PET.EMM_EPMR_PTE_NUS_DPG.W: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for PET.EMM_EPMR_PTE_NUS_DPG.W: {
  period: '2025-10-06',
  duoarea: 'NUS',
  'area-name': 'U.S.',
  product: 'EPMR',
  'product-name': 'Regular Gasoline',
  process: 'PTE',
  'process-name': 'Retail Sales',
  series: 'EMM_EPMR_PTE_NUS_DPG',
  'series-description': 'U.S. Regular All Formulations Retail Gasoline Prices (Dollars per Gallon)',
  value: 3.124,
  units: '$/GAL'
}
⚡ Quick commodity snapshot in 5165ms
✅ Macro context generated in 5183ms with 100.0% efficiency
⚠️ Performance target missed: 5183ms > 800ms target
🌍 Macro context pre-fetched for AAPL: success
📊 Progress update: macro 82%
🦄 EODHD UnicornBay: Response structure for AAPL: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for AAPL: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 82 current contracts for AAPL
✅ EODHD UnicornBay: Retrieved 53 calls, 29 puts for AAPL
🦄 UnicornBay analysis processed for AAPL: P/C 0.62, Sentiment: greed, Confidence: 0.82
📊 EODHD Enhanced options analysis for AAPL: 5862ms (target: 500ms)
📊 Enhanced options data pre-fetched for AAPL:
   P/C Ratio: 0.62
   IV Percentile: 5.0%
   Volume Divergence: 0.00
   Max Pain: $N/A
   Sentiment: greed
📊 Progress update: options 92%
🚀 Parallel data fetch completed in 5868ms (estimated sequential: ~11736ms)
Starting calculation of factor composite for AAPL
🎯 Calculating MAIN composite score for AAPL with ALL required components
📊 PHASE 2 CALIBRATION: Adjusted weights for AAPL ($3676.2B market cap):
   Technical: 23.5% (base 28.0%, multiplier 0.85)
   Fundamental: 33.1% (base 28.0%, multiplier 1.20)
🔍 Attempting to calculate technical overall score for AAPL
Fetching 250 days of historical data for AAPL
🌐 TwelveData API URL: https://api.twelvedata.com/time_series?symbol=AAPL&interval=1day&outputsize=100&apikey=d9cb9bb2d6ef402a8311be460f983faa
TwelveData: Retrieved 100 OHLC records for AAPL
Successfully fetched 100 historical price points for AAPL
✅ Using 100 data points for technical analysis of AAPL
📊 Technical analysis result for AAPL: 44/100
Technical Analysis: 0.440 (weight: 23.5%) ⚡
Calculating quality composite for data: {
  roe: 1.645935,
  debtToEquity: 2.090588,
  currentRatio: 0.867313,
  operatingMargin: 0.315102,
  netProfitMargin: 0.239713,
  grossProfitMargin: undefined
}
Quality factor ROE: 1.000 (weight: 0.3)
Quality factor Debt/Equity: 0.582 (weight: 0.25)
Quality factor Current Ratio: 0.200 (weight: 0.2)
Quality factor Operating Margin: 1.000 (weight: 0.15)
Quality factor Gross Profit Margin: No valid data (null)
Quality composite score: 0.706 (based on 4 factors, 0.90 total weight)
Fundamental Analysis: 0.706 (weight: 33.1%) 💎
🌍 Calculating macroeconomic composite from pre-fetched data...
🌍 Macroeconomic composite score: 1.000 (confidence: 1)
🌍 Macroeconomic Analysis: 1.000 (weight: 19.7%)
📰 Sentiment Analysis: 0.588 (weight: 17.8%)
📊 Calculating options intelligence score...
   P/C Ratio: 0.62 → Score: 0.832 (30% weight)
   IV Percentile: 5.0% → Score: 0.625 (25% weight)
   Options Flow: 0.70 → Score: 0.694 (20% weight)
   Volume Divergence: 0.00 → Score: 0.300 (10% weight)
✅ Options Intelligence Score: 0.676 (85% data coverage)
📊 Options Analysis: 0.676 (weight: 2.5%)
🌱 ESG Analysis: 0.810 (weight: 1.5%)
Short Interest service not available
📊 Short Interest Analysis: 0.500 (weight: 1.5%)
Extended Market Data service not available
💹 Extended Market Data: 0.500 (weight: 0.5%)
🎯 PHASE 2 CALIBRATION - Main composite calculation for AAPL:
   Final weighted score: 0.6774
   🔍 DEBUG totalScore: 0.6779, totalWeight: 1.0008
   Weight Allocation: Technical(28.0%) + Fundamental(28.0%) + Macroeconomic(20.0%) + Sentiment(18.0%) + Alternative(6.0% = Options 2.5% + ESG 1.5% + Short Interest 1.5% + Extended Market 0.5%) = 100.0%
   ✅ WEIGHT VERIFICATION: Total weights = 1.001 (target: 1.000)
   Contributing factors: [technicalAnalysis, technical_overall_score, fundamentalData, quality_composite, macroeconomicAnalysis, macroeconomic_composite, sentimentAnalysis, sentiment_composite, optionsAnalysis, options_composite, esgAnalysis, esg_composite, shortInterestAnalysis, short_interest_composite, extendedMarketData, extended_market_composite]
   🔍 DEBUG: Returning clamped score: 0.6774 (original: 0.6774)
✅ FactorLibrary: Composite score = 0.6774 (0-1 scale) for AAPL
✅ Factor composite for AAPL: 0.6774 (calculated in 188ms)
🎯 Enhanced composite score for AAPL: 0.6773732696334114
🔍 DEBUG: compositeScore type: number, value: 0.6773732696334114, clamped: 0.6773732696334114
✅ AlgorithmEngine: Passing through score = 0.6774 (0-1 scale, NO manipulation)
✅ Technical overall score for AAPL: 0.440 (44.0) - TRACKED
Starting calculation of factor quality_composite for AAPL
Calculating quality composite for data: {
  roe: 1.645935,
  debtToEquity: 2.090588,
  currentRatio: 0.867313,
  operatingMargin: 0.315102,
  netProfitMargin: 0.239713,
  grossProfitMargin: undefined
}
Quality factor ROE: 1.000 (weight: 0.3)
Quality factor Debt/Equity: 0.582 (weight: 0.25)
Quality factor Current Ratio: 0.200 (weight: 0.2)
Quality factor Operating Margin: 1.000 (weight: 0.15)
Quality factor Gross Profit Margin: No valid data (null)
Quality composite score: 0.706 (based on 4 factors, 0.90 total weight)
✅ Factor quality_composite for AAPL: 0.7061 (calculated in 0ms)
✅ Quality composite score for AAPL: 0.706 (70.6)
✅ Fundamental score for AAPL: 30.0 - TRACKED
✅ Analyst score for AAPL: 0.7 - TRACKED
Starting calculation of factor momentum_composite for AAPL
Calculating momentum composite for AAPL
Fetching 127 days of historical data for AAPL
🌐 TwelveData API URL: https://api.twelvedata.com/time_series?symbol=AAPL&interval=1day&outputsize=100&apikey=d9cb9bb2d6ef402a8311be460f983faa
TwelveData: Retrieved 100 OHLC records for AAPL
Successfully fetched 100 historical price points for AAPL
Momentum factor 1-month momentum: 0.594 (weight: 0.25)
Momentum factor 3-month momentum: 0.718 (weight: 0.3)
Momentum factor 6-month momentum: No data available
Momentum factor RSI: No data available
Momentum factor MACD: No data available
Momentum composite score for AAPL: 0.661 (based on 0.55 total weight)
✅ Factor momentum_composite for AAPL: 0.6613 (calculated in 461ms)
Starting calculation of factor value_composite for AAPL
Calculating value composite for data: {
  peRatio: 38.140111,
  pbRatio: 62.776145,
  priceToSales: undefined,
  evEbitda: undefined,
  marketCap: 3676187208850
}
Value factor P/E Ratio: 0.237 (weight: 0.35)
Value factor P/B Ratio: 0.000 (weight: 0.25)
Value factor P/S Ratio: No valid data (null)
Value factor EV/EBITDA: No valid data (null)
Value composite score: 0.138 (based on 2 factors, 0.60 total weight)
✅ Factor value_composite for AAPL: 0.1380 (calculated in 1ms)
Starting calculation of factor volatility_30d for AAPL
Calculating 30-day volatility for AAPL
Calculated 29 daily returns for AAPL
AAPL volatility stats: {
  periods: 29,
  dailyVol: '0.0164',
  annualizedVol: '0.2605',
  meanReturn: '0.0024'
}
AAPL volatility score: 0.740 (lower volatility = higher score)
✅ Factor volatility_30d for AAPL: 0.7395 (calculated in 1ms)
✅ Sentiment score for AAPL: 0.588 - TRACKED
Starting calculation of factor vwap_deviation_score for AAPL
📊 Calculating VWAP deviation score from pre-fetched data...
✅ Factor vwap_deviation_score for AAPL: 0.7000 (calculated in 0ms)
✅ VWAP deviation score for AAPL: 0.700 - TRACKED
Starting calculation of factor vwap_trading_signals for AAPL
📊 Calculating VWAP trading signals from pre-fetched data...
📊 VWAP trading signal: below with strong strength = 0.360
✅ Factor vwap_trading_signals for AAPL: 0.3600 (calculated in 0ms)
✅ VWAP trading signals for AAPL: 0.360 - TRACKED
Starting calculation of factor vwap_trend_analysis for AAPL
📊 Calculating VWAP trend score with historical analysis...
✅ Historical cache HIT: AAPL latest
✅ Historical cache HIT: AAPL latest
✅ Historical cache HIT: AAPL latest
📊 VWAP trend analysis for AAPL: trend=0.000, confidence=0.600, final=0.500
✅ Factor vwap_trend_analysis for AAPL: 0.5000 (calculated in 34ms)
Starting calculation of factor macroeconomic_sector_impact for AAPL
🌍 Calculating macroeconomic sector impact from pre-fetched data...
🌍 Macro sector impact for Technology: positive = 0.900
✅ Factor macroeconomic_sector_impact for AAPL: 0.9000 (calculated in 0ms)
✅ Macro sector impact for AAPL: 0.900 - TRACKED
Starting calculation of factor macroeconomic_composite for AAPL
🌍 Calculating macroeconomic composite from pre-fetched data...
🌍 Macroeconomic composite score: 1.000 (confidence: 1)
✅ Factor macroeconomic_composite for AAPL: 1.0000 (calculated in 0ms)
✅ Macroeconomic composite for AAPL: 1.000 - TRACKED
Starting calculation of factor esg_composite for AAPL
🌱 Analyzing ESG impact for AAPL (Technology)
✅ Factor esg_composite for AAPL: 0.8100 (calculated in 1ms)
✅ ESG composite score for AAPL: 0.810 - TRACKED
Starting calculation of factor short_interest_composite for AAPL
📊 Using pre-fetched short interest data for AAPL: score 0.50125
✅ Factor short_interest_composite for AAPL: 0.5012 (calculated in 0ms)
✅ Short interest composite for AAPL: 0.501 - TRACKED
Starting calculation of factor extended_market_composite for AAPL
💹 Using pre-fetched extended market data for AAPL: status market-hours
✅ Factor extended_market_composite for AAPL: 0.9170 (calculated in 0ms)
✅ Extended market composite for AAPL: 0.917 - TRACKED
✅ Options composite for AAPL: 0.676 - TRACKED
Starting calculation of factor put_call_ratio_score for AAPL
✅ Factor put_call_ratio_score for AAPL: 0.8324 (calculated in 0ms)
✅ Put/Call ratio score for AAPL: 0.832 - TRACKED
Starting calculation of factor options_flow_score for AAPL
✅ Factor options_flow_score for AAPL: 0.6938 (calculated in 0ms)
✅ Options flow score for AAPL: 0.694 - TRACKED
Starting calculation of factor max_pain_score for AAPL
⚠️ Factor max_pain_score for AAPL: returned null/NaN (0ms)
Starting calculation of factor iv_percentile_score for AAPL
✅ Factor iv_percentile_score for AAPL: 0.6250 (calculated in 0ms)
✅ IV percentile score for AAPL: 0.625 - TRACKED
Starting calculation of factor volume_divergence_score for AAPL
⚠️ Factor volume_divergence_score for AAPL: returned null/NaN (0ms)
Successfully calculated score for AAPL: 0.6773732696334114
Calculated scores for 1 stocks
📊 Progress update: technical 92%
📊 Analyst Consensus Data: {
  consensus: 'Buy',
  sentimentScore: 3.6,
  totalAnalysts: 109,
  distribution: { strongBuy: 1, buy: 66, hold: 34, sell: 8, strongSell: 0 },
  percentages: { buy: '61.5', hold: '31.2', sell: '7.3' },
  baseRecommendation: 'MODERATE_BUY',
  normalizedScore: 0.6773732696334114
}
Selected 1 stocks after applying criteria
🔍 enhanceSingleStockResult START for AAPL
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
[2025-10-10T17:24:16.498Z] DEBUG [FinancialDataService] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:16.498Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getFundamentalRatios
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:16.498Z] DEBUG [api.financial-modeling-prep] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 15000,
  "retries": 2
}
⚠️ getExtendedHoursData should use ExtendedMarketDataService, not FinancialDataService
[2025-10-10T17:24:16.502Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:16.502Z] DEBUG [FinancialDataService] Optimal source selection for stock_price
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:16.502Z] DEBUG [FinancialDataService] Trying Financial Modeling Prep for AAPL
[2025-10-10T17:24:16.502Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getStockPrice
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:16.503Z] DEBUG [FinancialDataService] Starting API call: getMarketData
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:16.503Z] DEBUG [FinancialDataService] Optimal source selection for market_data
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:16.503Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getMarketData
Metadata: {
  "timeout": 15000,
  "retries": 1
}
📦 Using cached company info for AAPL (24h cache)
[2025-10-10T17:24:16.613Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:16.615Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
[2025-10-10T17:24:16.615Z] INFO [FinancialDataService] Analyst ratings from FMP for AAPL
Metadata: {
  "consensus": "Buy",
  "totalAnalysts": 109
}
[2025-10-10T17:24:16.616Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 114ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 114,
  "attempts": 1
}
[2025-10-10T17:24:16.616Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 114ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 114,
  "symbol": "AAPL",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:24:16.616Z] DEBUG [FMPCacheManager] Cache entry set for fmp:stock_price:AAPL
Metadata: {
  "dataType": "stock_price",
  "ttl": "60s",
  "compressed": false,
  "size": "0.3KB"
}
[2025-10-10T17:24:16.616Z] DEBUG [FinancialDataService] Stock price cached for AAPL
Metadata: {
  "ttl": "60s"
}
[2025-10-10T17:24:16.616Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 114ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 114,
  "attempts": 1
}
[2025-10-10T17:24:16.630Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getMarketData completed in 127ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getMarketData",
  "duration": 127,
  "attempts": 1
}
[2025-10-10T17:24:16.630Z] DEBUG [FinancialDataService] Performance: getMarketData completed in 127ms
Metadata: {
  "type": "performance",
  "operation": "getMarketData",
  "duration": 127,
  "attempts": 1
}
[2025-10-10T17:24:17.243Z] WARN [api.financial-modeling-prep] Invalid ratios response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "AAPL"
}
[2025-10-10T17:24:17.243Z] WARN [api.financial-modeling-prep] Invalid metrics response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "AAPL"
}
[2025-10-10T17:24:17.243Z] WARN [api.financial-modeling-prep] Invalid pegRatio value for AAPL
Metadata: {
  "fieldName": "pegRatio",
  "value": -46.988617,
  "errors": [
    "Negative values not allowed",
    "Value must be at least 0"
  ]
}
[2025-10-10T17:24:17.243Z] DEBUG [api.financial-modeling-prep] Performance: getFundamentalRatios completed in 745ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 745,
  "attempts": 1
}
[2025-10-10T17:24:17.243Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getFundamentalRatios completed in 745ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getFundamentalRatios",
  "duration": 745,
  "attempts": 1
}
[2025-10-10T17:24:17.244Z] INFO [FinancialDataService] Fundamental ratios from Financial Modeling Prep for AAPL
Metadata: {
  "peRatio": "38.14",
  "pbRatio": "62.78",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:24:17.244Z] DEBUG [FinancialDataService] Performance: getFundamentalRatios completed in 746ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 746,
  "attempts": 1
}
[2025-10-10T17:24:17.244Z] DEBUG [FMPCacheManager] Cache entry set for fmp:fundamental_ratios:AAPL
Metadata: {
  "dataType": "fundamental_ratios",
  "ttl": "3600s",
  "compressed": false,
  "size": "0.8KB"
}
[2025-10-10T17:24:17.244Z] DEBUG [FinancialDataService] Cached fundamental ratios for AAPL
Missing market data for AAPL - continuing with available data
Enhanced factors for utilization: [technicalScore, technicalAnalysis, technical, fundamentalScore, macroeconomic_composite, fundamentalData, fundamentals]
Primary factors extracted for AAPL: [
  'technicalScore',
  'technicalAnalysis',
  'technical',
  'fundamentalScore',
  'macroeconomic_composite',
  'fundamentalData',
  'fundamentals'
]
📈 Options analysis completed for AAPL: P/C ratio 0.6190834524794944
🔍 ESD Check for AAPL: includeEarlySignal=true
⏭️ ESD skipped for AAPL (feature not enabled in request options)
🔍 Price Prediction Check for AAPL: includePricePrediction=undefined
⏭️ Price Prediction skipped for AAPL (feature not enabled in request options)
🔍 Sentiment-Fusion Check for AAPL: includeSentimentFusion=true
⏭️ Sentiment-Fusion skipped for AAPL (feature not enabled in request options)
📊 Analyst Consensus Data: {
  consensus: 'Buy',
  sentimentScore: 3.6,
  totalAnalysts: 109,
  distribution: { strongBuy: 1, buy: 66, hold: 34, sell: 8, strongSell: 0 },
  percentages: { buy: '61.5', hold: '31.2', sell: '7.3' },
  baseRecommendation: 'MODERATE_BUY',
  normalizedScore: 0.6773732696334114
}
🔍 Service utilization for technicalAnalysis: 1/1 = 100%
🔍 Service utilization for fundamentals: 1/1 = 100%
🔍 Service utilization for macroeconomicAnalysis: 1/1 = 100%
🔍 Service utilization for sentimentAnalysis: 1/1 = 100%
🔍 Service utilization for vwapAnalysis: 1/1 = 100%
🔍 vwapAnalysis utilization debug: 1/1 stocks detected
  AAPL: relevant factors: [ 'vwap_deviation_score', 'vwap_trading_signals' ]
    vwap_deviation_score: 0.7 (neutral=0.5, used=true)
    vwap_trading_signals: 0.36 (neutral=0.5, used=true)
🔍 Service utilization for esgAnalysis: 1/1 = 100%
🔍 Service utilization for shortInterestAnalysis: 1/1 = 100%
🔍 shortInterestAnalysis utilization debug: 1/1 stocks detected
  AAPL: relevant factors: [ 'short_interest_composite' ]
    short_interest_composite: 0.50125 (neutral=0.5, used=true)
🔍 Service utilization for optionsAnalysis: 1/1 = 100%
Actual cache hit rate: 0/0 = 0.0%
[2025-10-10T17:24:17.253Z] DEBUG [MLEnhancedStockSelectionService] Extracting features for 1 symbols
📰 Analyzing sentiment impact for AAPL (Technology)
[2025-10-10T17:24:17.286Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:17.289Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 60 earnings records for AAPL
[FeatureExtractor] Sample earnings date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for AAPL: 12.14%
[FeatureExtractor] Got 40 quarterly income statements for AAPL
[FeatureExtractor] Sample income date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for AAPL: -12.11% (recent: -0.94%, prev: 11.17%)
[2025-10-10T17:24:17.350Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:17.371Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
[2025-10-10T17:24:17.888Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
Feature extraction for AAPL completed in 636ms
[2025-10-10T17:24:17.889Z] DEBUG [MLEnhancedStockSelectionService] Feature extraction completed in 636ms
[2025-10-10T17:24:17.889Z] INFO [RealTimePredictionEngine] [predictEnsemble] Starting ensemble prediction for AAPL
[2025-10-10T17:24:17.897Z] DEBUG [ModelRegistry] Listed 3 models
Metadata: {
  "latency": 7,
  "filter": {
    "status": "deployed"
  }
}
[2025-10-10T17:24:17.897Z] INFO [RealTimePredictionEngine] [predictEnsemble] Found 3 deployed models
Metadata: {
  "models": [
    "sentiment-fusion v1.1.0",
    "price-prediction v1.1.0",
    "early-signal v1.0.0"
  ]
}
[2025-10-10T17:24:17.897Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running sentiment-fusion v1.1.0
[2025-10-10T17:24:17.898Z] DEBUG [api.polygon] Fetching news from Polygon
Metadata: {
  "ticker": "AAPL",
  "dateRange": {
    "from": "2025-10-03",
    "to": "2025-10-10"
  },
  "limit": 100
}
[2025-10-10T17:24:17.902Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running price-prediction v1.1.0
[2025-10-10T17:24:17.902Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running early-signal v1.0.0
📰 Analyzing sentiment impact for AAPL (Technology)
✅ Historical cache HIT: AAPL 2025-10-10
✅ Historical cache HIT: AAPL 2025-10-10
✅ Historical cache HIT: AAPL latest
✅ Historical cache HIT: AAPL latest
✅ Historical cache HIT: SPY latest
✅ Historical cache HIT: ^VIX latest
📊 Returning cached macro context (8ms)
✅ Historical cache HIT: AAPL latest
[2025-10-10T17:24:17.939Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:17.941Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 60 earnings records for AAPL
[FeatureExtractor] Sample earnings date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for AAPL: 12.14%
[2025-10-10T17:24:17.954Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
[FeatureExtractor] Got 40 quarterly income statements for AAPL
[FeatureExtractor] Sample income date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for AAPL: -12.11% (recent: -0.94%, prev: 11.17%)
[2025-10-10T17:24:17.994Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:18.015Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
[2025-10-10T17:24:18.037Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
Feature extraction for AAPL completed in 134ms
[2025-10-10T17:24:18.037Z] INFO [RealTimePredictionEngine] Starting Python prediction server: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/scripts/ml/predict-generic.py
✅ Historical cache HIT: XLK latest
[PriceFeatureExtractor] Extracted 43 features for AAPL in 142ms
[2025-10-10T17:24:18.045Z] INFO [RealTimePredictionEngine] Starting Python prediction server: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/scripts/ml/predict-generic.py
[2025-10-10T17:24:18.081Z] INFO [api.polygon] Successfully fetched news from Polygon
Metadata: {
  "ticker": "AAPL",
  "articleCount": 46,
  "hasNextPage": false
}
Feature extraction for AAPL completed in 184ms
[2025-10-10T17:24:18.082Z] INFO [RealTimePredictionEngine] Starting Python prediction server: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/scripts/ml/predict-generic.py
[2025-10-10T17:24:18.934Z] INFO [RealTimePredictionEngine] Python prediction server ready
[2025-10-10T17:24:18.954Z] INFO [RealTimePredictionEngine] [predictEnsemble] sentiment-fusion: BULLISH (50.0% confident)
[2025-10-10T17:24:18.957Z] INFO [RealTimePredictionEngine] Python prediction server ready
[2025-10-10T17:24:18.964Z] INFO [RealTimePredictionEngine] [predictEnsemble] price-prediction: NEUTRAL (39.3% confident)
[2025-10-10T17:24:18.968Z] INFO [RealTimePredictionEngine] Python prediction server ready
[2025-10-10T17:24:18.970Z] INFO [RealTimePredictionEngine] [predictEnsemble] early-signal: NEUTRAL (41.0% confident)
[2025-10-10T17:24:18.971Z] INFO [RealTimePredictionEngine] [predictEnsemble] Consensus for AAPL: NEUTRAL (22.4% confident) [LOW CONSENSUS - MODELS DISAGREE]
Metadata: {
  "breakdown": {
    "bullish": 0.3333333333333333,
    "bearish": 0,
    "neutral": 0.6666666666666666
  },
  "votes": [
    "sentiment-fusion: BULLISH",
    "price-prediction: NEUTRAL",
    "early-signal: NEUTRAL"
  ],
  "lowConsensus": true
}
[2025-10-10T17:24:18.971Z] DEBUG [MLEnhancedStockSelectionService] Fetched 1/1 ML predictions
[2025-10-10T17:24:18.971Z] DEBUG [EnhancedScoringEngine] ML confidence 0.2241763093152403 below threshold 0.5, using reduced weight
[2025-10-10T17:24:18.971Z] DEBUG [EnhancedScoringEngine] ML confidence 0.2241763093152403 below threshold 0.5, using reduced weight
[2025-10-10T17:24:18.972Z] INFO [MLEnhancedStockSelectionService] ML enhancement completed: 1 predictions, 9284ms latency
📊 Progress update: complete 100%
✅ Comprehensive analysis completed in 9285ms { success: true, topSelections: 1, analysisInputServices: 11 }
🔍 DEBUG factorScores for AAPL: {
  "composite": 0.6773732696334114,
  "technical_overall_score": 0.44,
  "technicalScore": 44,
  "quality_composite": 0.7060784444444445,
  "fundamentalScore": 30,
  "analystScore": 0.6788073394495413,
  "momentum_composite": 0.6613238164153219,
  "value_composite": 0.13798305583333334,
  "volatility_30d": 0.7395181664201351,
  "sentiment_composite": 0.5881260842200318,
  "vwap_deviation_score": 0.7,
  "vwap_trading_signals": 0.36,
  "macroeconomic_sector_impact": 0.9,
  "macroeconomic_composite": 1,
  "esg_composite": 0.81,
  "short_interest_composite": 0.50125,
  "extended_market_composite": 0.917,
  "options_composite": 0.6761473949440715,
  "put_call_ratio_score": 0.8323666190082023,
  "options_flow_score": 0.6938265,
  "iv_percentile_score": 0.625
}
🔍 DEBUG overallScore: 0.671408836889772
✅ API /stocks/analyze: Display score = 67.14 (formatted from 0.6714)
 POST /api/stocks/analyze 200 in 10889ms
[2025-10-10T17:24:18.978Z] ERROR [PredictionLogger] Failed to log prediction for AAPL: invalid input syntax for type uuid: "early_signal_1w"
[2025-10-10T17:24:18.978Z] ERROR [PredictionLogger] Failed to log prediction for AAPL: invalid input syntax for type uuid: "early_signal_1w"
 GET /api/stocks/analyze/progress/session_1760117048082_by7b17sco 200 in 10886ms
❌ SSE connection closed for session: session_1760117048082_by7b17sco
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 32ms
🔍 Stock search request: "NV"
📡 Cache MISS - fetching from FMP API for: "NV"
✅ Found 20 results for "NV" (cached for 5 min)
 GET /api/stocks/search?query=NV 200 in 204ms
🔍 Stock search request: "NVDA"
📡 Cache MISS - fetching from FMP API for: "NVDA"
✅ Found 13 results for "NVDA" (cached for 5 min)
 GET /api/stocks/search?query=NVDA 200 in 97ms
🔬 Starting comprehensive analysis via StockSelectionService...
📦 Request body keys: [ 'mode', 'limit', 'include_ml', 'ml_horizon', 'symbols', 'sessionId' ]
📦 Raw sessionId from body: session_1760117080072_ekpeapdn1
🎯 Validated sessionId: session_1760117080072_ekpeapdn1
🎯 SessionId type: string
✅ Initializing ProgressTracker for session: session_1760117080072_ekpeapdn1
📊 Progress update: init 1%
✅ Started 'init' stage
📊 Progress update: init 1%
📊 Progress update: init 2%
🔍 /api/stocks/analyze - ESD Toggle: true, Sentiment-Fusion Toggle: true, ML Enhancement: true
📊 Executing comprehensive stock analysis: {
  mode: 'single_stock',
  symbols: [ 'AAPL' ],
  sector: undefined,
  requestId: 'admin_test_1760117080108_t3128gspp',
  withProgressTracking: true
}
[2025-10-10T17:24:40.108Z] INFO [MLEnhancedStockSelectionService] ML enhancement enabled for request: AAPL
[2025-10-10T17:24:40.108Z] INFO [RealTimePredictionEngine] Initializing RealTimePredictionEngine
[2025-10-10T17:24:40.109Z] INFO [RealTimePredictionEngine] RealTimePredictionEngine initialized successfully
🔍 executeSingleStockAnalysis START
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
🔍 Cache check for AAPL: HIT
🔍 Cache HIT for AAPL - validating price freshness...
[2025-10-10T17:24:40.109Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:40.109Z] DEBUG [FinancialDataService] Stock price cache hit for AAPL
Metadata: {
  "age": "33s"
}
[2025-10-10T17:24:40.109Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 0ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 0,
  "attempts": 1
}
🔍 Price unchanged for AAPL ($247.72) - returning cached result
🔍 Service utilization for technicalAnalysis: 1/1 = 100%
🔍 Service utilization for fundamentals: 1/1 = 100%
🔍 Service utilization for macroeconomicAnalysis: 1/1 = 100%
🔍 Service utilization for sentimentAnalysis: 1/1 = 100%
🔍 Service utilization for vwapAnalysis: 1/1 = 100%
🔍 vwapAnalysis utilization debug: 1/1 stocks detected
  AAPL: relevant factors: [ 'vwap_deviation_score', 'vwap_trading_signals' ]
    vwap_deviation_score: 0.7 (neutral=0.5, used=true)
    vwap_trading_signals: 0.36 (neutral=0.5, used=true)
🔍 Service utilization for esgAnalysis: 1/1 = 100%
🔍 Service utilization for shortInterestAnalysis: 1/1 = 100%
🔍 shortInterestAnalysis utilization debug: 1/1 stocks detected
  AAPL: relevant factors: [ 'short_interest_composite' ]
    short_interest_composite: 0.50125 (neutral=0.5, used=true)
🔍 Service utilization for optionsAnalysis: 1/1 = 100%
Actual cache hit rate: 0/0 = 0.0%
[2025-10-10T17:24:40.110Z] DEBUG [MLEnhancedStockSelectionService] Extracting features for 1 symbols
📰 Analyzing sentiment impact for AAPL (Technology)
📡 SSE connection established for session: session_1760117080072_ekpeapdn1
✅ SSE session session_1760117080072_ekpeapdn1 initialized
[FeatureExtractor] Got 60 earnings records for AAPL
[FeatureExtractor] Sample earnings date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for AAPL: 12.14%
[FeatureExtractor] Got 40 quarterly income statements for AAPL
[FeatureExtractor] Sample income date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for AAPL: -12.11% (recent: -0.94%, prev: 11.17%)
[2025-10-10T17:24:40.212Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
[2025-10-10T17:24:40.214Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:40.225Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:40.254Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:40.269Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
Feature extraction for AAPL completed in 160ms
[2025-10-10T17:24:40.270Z] DEBUG [MLEnhancedStockSelectionService] Feature extraction completed in 160ms
[2025-10-10T17:24:40.270Z] INFO [RealTimePredictionEngine] [predictEnsemble] Starting ensemble prediction for AAPL
[2025-10-10T17:24:40.271Z] DEBUG [ModelRegistry] Listed 3 models
Metadata: {
  "latency": 1,
  "filter": {
    "status": "deployed"
  }
}
[2025-10-10T17:24:40.271Z] INFO [RealTimePredictionEngine] [predictEnsemble] Found 3 deployed models
Metadata: {
  "models": [
    "sentiment-fusion v1.1.0",
    "price-prediction v1.1.0",
    "early-signal v1.0.0"
  ]
}
[2025-10-10T17:24:40.271Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running sentiment-fusion v1.1.0
[2025-10-10T17:24:40.271Z] DEBUG [api.polygon] Fetching news from Polygon
Metadata: {
  "ticker": "AAPL",
  "dateRange": {
    "from": "2025-10-03",
    "to": "2025-10-10"
  },
  "limit": 100
}
[2025-10-10T17:24:40.272Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running price-prediction v1.1.0
[2025-10-10T17:24:40.272Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running early-signal v1.0.0
📰 Analyzing sentiment impact for AAPL (Technology)
✅ Historical cache HIT: AAPL 2025-10-10
✅ Historical cache HIT: AAPL 2025-10-10
✅ Historical cache HIT: AAPL latest
[PriceFeatureExtractor] Extracted 43 features for AAPL in 4ms
[2025-10-10T17:24:40.277Z] INFO [RealTimePredictionEngine] [predictEnsemble] price-prediction: NEUTRAL (39.3% confident)
[2025-10-10T17:24:40.302Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:40.305Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 60 earnings records for AAPL
[FeatureExtractor] Sample earnings date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for AAPL: 12.14%
[2025-10-10T17:24:40.334Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 40 quarterly income statements for AAPL
[FeatureExtractor] Sample income date: 2025-06-28, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for AAPL: -12.11% (recent: -0.94%, prev: 11.17%)
[2025-10-10T17:24:40.365Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:24:40.374Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for AAPL
Metadata: {
  "consensus": "Buy",
  "strongBuy": 1,
  "buy": 66,
  "hold": 34,
  "sell": 8,
  "strongSell": 0
}
Feature extraction for AAPL completed in 102ms
[2025-10-10T17:24:40.374Z] INFO [RealTimePredictionEngine] [predictEnsemble] early-signal: NEUTRAL (41.0% confident)
[2025-10-10T17:24:40.461Z] INFO [api.polygon] Successfully fetched news from Polygon
Metadata: {
  "ticker": "AAPL",
  "articleCount": 46,
  "hasNextPage": false
}
Feature extraction for AAPL completed in 191ms
[2025-10-10T17:24:40.463Z] INFO [RealTimePredictionEngine] [predictEnsemble] sentiment-fusion: BULLISH (50.0% confident)
[2025-10-10T17:24:40.463Z] INFO [RealTimePredictionEngine] [predictEnsemble] Consensus for AAPL: NEUTRAL (22.4% confident) [LOW CONSENSUS - MODELS DISAGREE]
Metadata: {
  "breakdown": {
    "bullish": 0.3333333333333333,
    "bearish": 0,
    "neutral": 0.6666666666666666
  },
  "votes": [
    "sentiment-fusion: BULLISH",
    "price-prediction: NEUTRAL",
    "early-signal: NEUTRAL"
  ],
  "lowConsensus": true
}
[2025-10-10T17:24:40.464Z] DEBUG [MLEnhancedStockSelectionService] Fetched 1/1 ML predictions
[2025-10-10T17:24:40.464Z] DEBUG [EnhancedScoringEngine] ML confidence 0.2241763093152403 below threshold 0.5, using reduced weight
[2025-10-10T17:24:40.465Z] DEBUG [EnhancedScoringEngine] ML confidence 0.2241763093152403 below threshold 0.5, using reduced weight
[2025-10-10T17:24:40.465Z] INFO [MLEnhancedStockSelectionService] ML enhancement completed: 1 predictions, 356ms latency
📊 Progress update: complete 100%
✅ Comprehensive analysis completed in 357ms { success: true, topSelections: 1, analysisInputServices: 11 }
🔍 DEBUG factorScores for AAPL: {
  "composite": 0.6773732696334114,
  "technical_overall_score": 0.44,
  "technicalScore": 44,
  "quality_composite": 0.7060784444444445,
  "fundamentalScore": 30,
  "analystScore": 0.6788073394495413,
  "momentum_composite": 0.6613238164153219,
  "value_composite": 0.13798305583333334,
  "volatility_30d": 0.7395181664201351,
  "sentiment_composite": 0.5881260842200318,
  "vwap_deviation_score": 0.7,
  "vwap_trading_signals": 0.36,
  "macroeconomic_sector_impact": 0.9,
  "macroeconomic_composite": 1,
  "esg_composite": 0.81,
  "short_interest_composite": 0.50125,
  "extended_market_composite": 0.917,
  "options_composite": 0.6761473949440715,
  "put_call_ratio_score": 0.8323666190082023,
  "options_flow_score": 0.6938265,
  "iv_percentile_score": 0.625
}
🔍 DEBUG overallScore: 0.671408836889772
✅ API /stocks/analyze: Display score = 67.14 (formatted from 0.6714)
 POST /api/stocks/analyze 200 in 391ms
[2025-10-10T17:24:40.474Z] ERROR [PredictionLogger] Failed to log prediction for AAPL: invalid input syntax for type uuid: "early_signal_1w"
[2025-10-10T17:24:40.474Z] ERROR [PredictionLogger] Failed to log prediction for AAPL: invalid input syntax for type uuid: "early_signal_1w"
 GET /api/stocks/analyze/progress/session_1760117080072_ekpeapdn1 200 in 379ms
❌ SSE connection closed for session: session_1760117080072_ekpeapdn1
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔬 Starting comprehensive analysis via StockSelectionService...
📦 Request body keys: [ 'mode', 'limit', 'include_ml', 'ml_horizon', 'symbols', 'sessionId' ]
📦 Raw sessionId from body: session_1760117088833_4hlfudhng
🎯 Validated sessionId: session_1760117088833_4hlfudhng
🎯 SessionId type: string
✅ Initializing ProgressTracker for session: session_1760117088833_4hlfudhng
📊 Progress update: init 1%
✅ Started 'init' stage
📊 Progress update: init 1%
📊 Progress update: init 2%
🔍 /api/stocks/analyze - ESD Toggle: true, Sentiment-Fusion Toggle: true, ML Enhancement: true
📊 Executing comprehensive stock analysis: {
  mode: 'single_stock',
  symbols: [ 'NVDA' ],
  sector: undefined,
  requestId: 'admin_test_1760117088862_3vrcm9hrl',
  withProgressTracking: true
}
[2025-10-10T17:24:48.862Z] INFO [MLEnhancedStockSelectionService] ML enhancement enabled for request: NVDA
[2025-10-10T17:24:48.862Z] INFO [RealTimePredictionEngine] Initializing RealTimePredictionEngine
[2025-10-10T17:24:48.862Z] INFO [RealTimePredictionEngine] RealTimePredictionEngine initialized successfully
🔍 executeSingleStockAnalysis START
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
🔍 Cache check for NVDA: MISS
🔍 No cache or price invalidated, proceeding with fresh analysis for NVDA
🔧 Building customized config for: composite
📋 Base config keys: [
  'id',
  'name',
  'description',
  'type',
  'enabled',
  'selectionCriteria',
  'universe',
  'weights',
  'selection',
  'risk',
  'dataFusion',
  'metadata'
]
🌌 Base universe: { maxPositions: 40, marketCapMin: 500000000 }
✅ Universe config built successfully: { maxPositions: 1, marketCapMin: 500000000, excludeSymbols: [] }
No data sources available in service config, using default
Using symbols from context: [NVDA]
Algorithm Composite Analysis Algorithm: Evaluating 1 stocks
📊 Progress update: market_data 5%
📊 Using optimized batch size: 10 (FMP Starter: true)
Fetching fresh market data for NVDA...
[2025-10-10T17:24:48.869Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:48.869Z] DEBUG [FinancialDataService] Optimal source selection for stock_price
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 5
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:48.869Z] DEBUG [FinancialDataService] Trying Financial Modeling Prep for NVDA
[2025-10-10T17:24:48.869Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getStockPrice
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:48.870Z] DEBUG [FinancialDataService] Starting API call: getMarketData
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:48.870Z] DEBUG [FinancialDataService] Optimal source selection for market_data
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 5
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:48.870Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getMarketData
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:48.871Z] DEBUG [FinancialDataService] Starting API call: getCompanyInfo
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:48.871Z] DEBUG [FinancialDataService] Optimal source selection for company_info
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 5
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:48.871Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getCompanyInfo
Metadata: {
  "timeout": 15000,
  "retries": 1
}
📡 SSE connection established for session: session_1760117088833_4hlfudhng
✅ SSE session session_1760117088833_4hlfudhng initialized
[2025-10-10T17:24:48.962Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 93ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 93,
  "attempts": 1
}
[2025-10-10T17:24:48.962Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 93ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 93,
  "symbol": "NVDA",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:24:48.963Z] DEBUG [FMPCacheManager] Cache entry set for fmp:stock_price:NVDA
Metadata: {
  "dataType": "stock_price",
  "ttl": "60s",
  "compressed": false,
  "size": "0.3KB"
}
[2025-10-10T17:24:48.963Z] DEBUG [FinancialDataService] Stock price cached for NVDA
Metadata: {
  "ttl": "60s"
}
[2025-10-10T17:24:48.963Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 94ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 94,
  "attempts": 1
}
[2025-10-10T17:24:48.970Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getMarketData completed in 100ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getMarketData",
  "duration": 100,
  "attempts": 1
}
[2025-10-10T17:24:48.970Z] DEBUG [FinancialDataService] Performance: getMarketData completed in 100ms
Metadata: {
  "type": "performance",
  "operation": "getMarketData",
  "duration": 100,
  "attempts": 1
}
[2025-10-10T17:24:48.970Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getCompanyInfo completed in 99ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getCompanyInfo",
  "duration": 99,
  "attempts": 1
}
[2025-10-10T17:24:48.970Z] DEBUG [FinancialDataService] Performance: getCompanyInfo completed in 99ms
Metadata: {
  "type": "performance",
  "operation": "getCompanyInfo",
  "duration": 99,
  "attempts": 1
}
Got stock data for NVDA: price=187.68, volume=160954290
✅ Market data fetched for 1/1 symbols (100.0% success rate)
Fetched market data for 1 stocks
📊 Progress update: market_data 7%
📊 Progress update: fundamentals 12%
[2025-10-10T17:24:48.971Z] DEBUG [FinancialDataService] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:24:48.971Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getFundamentalRatios
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:48.971Z] DEBUG [api.financial-modeling-prep] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 15000,
  "retries": 2
}
[2025-10-10T17:24:49.007Z] WARN [api.financial-modeling-prep] Invalid ratios response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T17:24:49.007Z] WARN [api.financial-modeling-prep] Invalid metrics response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T17:24:49.007Z] DEBUG [api.financial-modeling-prep] Performance: getFundamentalRatios completed in 36ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 36,
  "attempts": 1
}
[2025-10-10T17:24:49.007Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getFundamentalRatios completed in 36ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getFundamentalRatios",
  "duration": 36,
  "attempts": 1
}
[2025-10-10T17:24:49.007Z] INFO [FinancialDataService] Fundamental ratios from Financial Modeling Prep for NVDA
Metadata: {
  "peRatio": "39.90",
  "pbRatio": "36.66",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:24:49.007Z] DEBUG [FinancialDataService] Performance: getFundamentalRatios completed in 36ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 36,
  "attempts": 1
}
[2025-10-10T17:24:49.007Z] DEBUG [FMPCacheManager] Cache entry set for fmp:fundamental_ratios:NVDA
Metadata: {
  "dataType": "fundamental_ratios",
  "ttl": "3600s",
  "compressed": false,
  "size": "0.8KB"
}
[2025-10-10T17:24:49.007Z] DEBUG [FinancialDataService] Cached fundamental ratios for NVDA
[2025-10-10T17:24:49.008Z] DEBUG [FinancialDataService] Starting API call: getCompanyInfo
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:24:49.008Z] DEBUG [FinancialDataService] Optimal source selection for company_info
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 8
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:24:49.008Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getCompanyInfo
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:24:49.037Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getCompanyInfo completed in 29ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getCompanyInfo",
  "duration": 29,
  "attempts": 1
}
[2025-10-10T17:24:49.037Z] DEBUG [FinancialDataService] Performance: getCompanyInfo completed in 29ms
Metadata: {
  "type": "performance",
  "operation": "getCompanyInfo",
  "duration": 29,
  "attempts": 1
}
Fetched fundamental data for 1 stocks
📊 Progress update: fundamentals 17%
📊 Progress update: technical 21%
Processing symbol NVDA, marketData keys: [NVDA]
Calculating score for NVDA with market data: { price: 187.68, volume: 160954290 }
Starting score calculation for NVDA, weights count: 1
🎯 COMPOSITE ALGORITHM DETECTED - Using enhanced composite factor calculation
📊 Progress update: technical 25%
📊 Progress update: analyst 28%
[2025-10-10T17:24:49.069Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[2025-10-10T17:24:49.069Z] INFO [FinancialDataService] Analyst ratings from FMP for NVDA
Metadata: {
  "consensus": "Buy",
  "totalAnalysts": 79
}
📊 Analyst data pre-fetched for sentiment: Buy (79 analysts, 3.7/5)
📊 Progress update: analyst 30%
🚀 Fetching NVDA data from 7 sources in parallel...
📊 Progress update: sentiment 36%
📰 Pre-fetching sentiment data for NVDA...
📊 Progress update: vwap 39%
📊 Pre-fetching VWAP analysis for NVDA...
📊 Progress update: macro 43%
🌍 Pre-fetching macroeconomic context for NVDA (Technology)...
📊 Progress update: esg 46%
🌱 Pre-fetching ESG data for NVDA (Technology)...
📊 Progress update: short_interest 49%
📊 Pre-fetching short interest data for NVDA (Technology)...
📊 Progress update: extended_hours 51%
🕒 Pre-fetching extended market data for NVDA...
📊 Progress update: options 61%
📊 Pre-fetching options data for NVDA...
📊 Progress update: options 61%
✅ ESG Data Service initialized with API key
🌱 Analyzing ESG impact for NVDA (Technology)
✅ Short Interest Service initialized with Polygon API integration
📊 Analyzing short interest impact for NVDA (Technology)
🔗 Initializing Redis connection to localhost:6379
📊 Progress update: options 61%
🦄 EODHD: Fetching UnicornBay options analysis for NVDA
🦄 EODHD UnicornBay: Fetching enhanced options chain for NVDA
🦄 EODHD UnicornBay: Constructed URL for NVDA: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=NVDA&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🔗 EODHD API: Fetching options chain for NVDA
🦄 Attempting UnicornBay enhanced options data for NVDA
🦄 EODHD UnicornBay: Fetching enhanced options chain for NVDA
🦄 EODHD UnicornBay: Constructed URL for NVDA: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=NVDA&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🔗 Initializing Redis connection to localhost:6379
📰 Sentiment pre-fetched for NVDA: 0.6117619989367359
📊 Progress update: sentiment 67%
📊 Returning cached macro context (3ms)
📊 Short interest data for NVDA retrieved from cache
🌍 Macro context pre-fetched for NVDA: success
📊 Progress update: macro 71%
📊 Short interest pre-fetched for NVDA: score 0.501, impact neutral
📊 Progress update: short_interest 74%
🌱 ESG pre-fetched for NVDA: 0.630
📊 Progress update: esg 77%
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
✅ Redis connected successfully
✅ Redis connected successfully
🚀 Redis ready for operations
🚀 Redis ready for operations
📊 VWAP pre-fetched for NVDA: success
📊 Progress update: vwap 80%
🕒 Extended market data pre-fetched for NVDA: market-hours
📊 Progress update: extended_hours 82%
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🦄 EODHD UnicornBay: Response structure for NVDA: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for NVDA: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 54 current contracts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
📊 EODHD UnicornBay: Fetching enhanced put/call ratio for NVDA
🦄 EODHD UnicornBay: Fetching enhanced options chain for NVDA
🦄 EODHD UnicornBay: Constructed URL for NVDA: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=NVDA&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🦄 EODHD UnicornBay: Response structure for NVDA: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for NVDA: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 54 current contracts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
✅ Using UnicornBay enhanced data for NVDA
📋 Memory optimization: 0.0% reduction
🔗 EODHD Optimized options chain for NVDA: 17326ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🦄 EODHD UnicornBay: Response structure for NVDA: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for NVDA: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 54 current contracts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
🦄 UnicornBay analysis processed for NVDA: P/C 0.19, Sentiment: greed, Confidence: 0.54
📊 EODHD Enhanced options analysis for NVDA: 35248ms (target: 500ms)
📊 Enhanced options data pre-fetched for NVDA:
   P/C Ratio: 0.19
   IV Percentile: 5.0%
   Volume Divergence: 0.00
   Max Pain: $N/A
   Sentiment: greed
📊 Progress update: options 92%
🚀 Parallel data fetch completed in 35250ms (estimated sequential: ~70500ms)
Starting calculation of factor composite for NVDA
🎯 Calculating MAIN composite score for NVDA with ALL required components
📊 PHASE 2 CALIBRATION: Adjusted weights for NVDA ($4569.4B market cap):
   Technical: 23.5% (base 28.0%, multiplier 0.85)
   Fundamental: 33.1% (base 28.0%, multiplier 1.20)
🔍 Attempting to calculate technical overall score for NVDA
Fetching 250 days of historical data for NVDA
🌐 TwelveData API URL: https://api.twelvedata.com/time_series?symbol=NVDA&interval=1day&outputsize=100&apikey=d9cb9bb2d6ef402a8311be460f983faa
TwelveData: Retrieved 100 OHLC records for NVDA
Successfully fetched 100 historical price points for NVDA
✅ Using 100 data points for technical analysis of NVDA
📊 Technical analysis result for NVDA: 33/100
Technical Analysis: 0.330 (weight: 23.5%) ⚡
Calculating quality composite for data: {
  roe: 0.918729,
  debtToEquity: 0.129464,
  currentRatio: 4.439851,
  operatingMargin: 0.624175,
  netProfitMargin: 0.55848,
  grossProfitMargin: undefined
}
Quality factor ROE: 1.000 (weight: 0.3)
Quality factor Debt/Equity: 0.974 (weight: 0.25)
Quality factor Current Ratio: 0.949 (weight: 0.2)
Quality factor Operating Margin: 1.000 (weight: 0.15)
Quality factor Gross Profit Margin: No valid data (null)
Quality composite score: 0.981 (based on 4 factors, 0.90 total weight)
Fundamental Analysis: 0.981 (weight: 33.1%) 💎
🌍 Calculating macroeconomic composite from pre-fetched data...
🌍 Macroeconomic composite score: 1.000 (confidence: 1)
🌍 Macroeconomic Analysis: 1.000 (weight: 19.7%)
📰 Sentiment Analysis: 0.612 (weight: 17.8%)
📊 Calculating options intelligence score...
   P/C Ratio: 0.19 → Score: 1.004 (30% weight)
   IV Percentile: 5.0% → Score: 0.625 (25% weight)
   Options Flow: 0.70 → Score: 0.737 (20% weight)
   Volume Divergence: 0.00 → Score: 0.300 (10% weight)
✅ Options Intelligence Score: 0.747 (85% data coverage)
📊 Options Analysis: 0.747 (weight: 2.5%)
🌱 ESG Analysis: 0.630 (weight: 1.5%)
Short Interest service not available
📊 Short Interest Analysis: 0.500 (weight: 1.5%)
Extended Market Data service not available
💹 Extended Market Data: 0.500 (weight: 0.5%)
🎯 PHASE 2 CALIBRATION - Main composite calculation for NVDA:
   Final weighted score: 0.7460
   🔍 DEBUG totalScore: 0.7466, totalWeight: 1.0008
   Weight Allocation: Technical(28.0%) + Fundamental(28.0%) + Macroeconomic(20.0%) + Sentiment(18.0%) + Alternative(6.0% = Options 2.5% + ESG 1.5% + Short Interest 1.5% + Extended Market 0.5%) = 100.0%
   ✅ WEIGHT VERIFICATION: Total weights = 1.001 (target: 1.000)
   Contributing factors: [technicalAnalysis, technical_overall_score, fundamentalData, quality_composite, macroeconomicAnalysis, macroeconomic_composite, sentimentAnalysis, sentiment_composite, optionsAnalysis, options_composite, esgAnalysis, esg_composite, shortInterestAnalysis, short_interest_composite, extendedMarketData, extended_market_composite]
   🔍 DEBUG: Returning clamped score: 0.7460 (original: 0.7460)
✅ FactorLibrary: Composite score = 0.7460 (0-1 scale) for NVDA
✅ Factor composite for NVDA: 0.7460 (calculated in 167ms)
🎯 Enhanced composite score for NVDA: 0.7459936984091335
🔍 DEBUG: compositeScore type: number, value: 0.7459936984091335, clamped: 0.7459936984091335
✅ AlgorithmEngine: Passing through score = 0.7460 (0-1 scale, NO manipulation)
✅ Technical overall score for NVDA: 0.330 (33.0) - TRACKED
Starting calculation of factor quality_composite for NVDA
Calculating quality composite for data: {
  roe: 0.918729,
  debtToEquity: 0.129464,
  currentRatio: 4.439851,
  operatingMargin: 0.624175,
  netProfitMargin: 0.55848,
  grossProfitMargin: undefined
}
Quality factor ROE: 1.000 (weight: 0.3)
Quality factor Debt/Equity: 0.974 (weight: 0.25)
Quality factor Current Ratio: 0.949 (weight: 0.2)
Quality factor Operating Margin: 1.000 (weight: 0.15)
Quality factor Gross Profit Margin: No valid data (null)
Quality composite score: 0.981 (based on 4 factors, 0.90 total weight)
✅ Factor quality_composite for NVDA: 0.9814 (calculated in 1ms)
✅ Quality composite score for NVDA: 0.981 (98.1)
✅ Fundamental score for NVDA: 50.0 - TRACKED
✅ Analyst score for NVDA: 0.7 - TRACKED
Starting calculation of factor momentum_composite for NVDA
Calculating momentum composite for NVDA
Fetching 127 days of historical data for NVDA
🌐 TwelveData API URL: https://api.twelvedata.com/time_series?symbol=NVDA&interval=1day&outputsize=100&apikey=d9cb9bb2d6ef402a8311be460f983faa
TwelveData: Retrieved 100 OHLC records for NVDA
Successfully fetched 100 historical price points for NVDA
Momentum factor 1-month momentum: 0.574 (weight: 0.25)
Momentum factor 3-month momentum: 0.673 (weight: 0.3)
Momentum factor 6-month momentum: No data available
Momentum factor RSI: No data available
Momentum factor MACD: No data available
Momentum composite score for NVDA: 0.628 (based on 0.55 total weight)
✅ Factor momentum_composite for NVDA: 0.6280 (calculated in 118ms)
Starting calculation of factor value_composite for NVDA
Calculating value composite for data: {
  peRatio: 39.898506,
  pbRatio: 36.655907,
  priceToSales: undefined,
  evEbitda: undefined,
  marketCap: 4569444960000
}
Value factor P/E Ratio: 0.229 (weight: 0.35)
Value factor P/B Ratio: 0.000 (weight: 0.25)
Value factor P/S Ratio: No valid data (null)
Value factor EV/EBITDA: No valid data (null)
Value composite score: 0.134 (based on 2 factors, 0.60 total weight)
✅ Factor value_composite for NVDA: 0.1336 (calculated in 0ms)
Starting calculation of factor volatility_30d for NVDA
Calculating 30-day volatility for NVDA
Calculated 29 daily returns for NVDA
NVDA volatility stats: {
  periods: 29,
  dailyVol: '0.0187',
  annualizedVol: '0.2964',
  meanReturn: '0.0028'
}
NVDA volatility score: 0.704 (lower volatility = higher score)
✅ Factor volatility_30d for NVDA: 0.7036 (calculated in 1ms)
✅ Sentiment score for NVDA: 0.612 - TRACKED
Starting calculation of factor vwap_deviation_score for NVDA
📊 Calculating VWAP deviation score from pre-fetched data...
✅ Factor vwap_deviation_score for NVDA: 0.7000 (calculated in 0ms)
✅ VWAP deviation score for NVDA: 0.700 - TRACKED
Starting calculation of factor vwap_trading_signals for NVDA
📊 Calculating VWAP trading signals from pre-fetched data...
📊 VWAP trading signal: below with strong strength = 0.360
✅ Factor vwap_trading_signals for NVDA: 0.3600 (calculated in 0ms)
✅ VWAP trading signals for NVDA: 0.360 - TRACKED
Starting calculation of factor vwap_trend_analysis for NVDA
📊 Calculating VWAP trend score with historical analysis...
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
📊 VWAP trend analysis for NVDA: trend=0.000, confidence=0.600, final=0.500
✅ Factor vwap_trend_analysis for NVDA: 0.5000 (calculated in 32ms)
Starting calculation of factor macroeconomic_sector_impact for NVDA
🌍 Calculating macroeconomic sector impact from pre-fetched data...
🌍 Macro sector impact for Technology: positive = 0.900
✅ Factor macroeconomic_sector_impact for NVDA: 0.9000 (calculated in 1ms)
✅ Macro sector impact for NVDA: 0.900 - TRACKED
Starting calculation of factor macroeconomic_composite for NVDA
🌍 Calculating macroeconomic composite from pre-fetched data...
🌍 Macroeconomic composite score: 1.000 (confidence: 1)
✅ Factor macroeconomic_composite for NVDA: 1.0000 (calculated in 0ms)
✅ Macroeconomic composite for NVDA: 1.000 - TRACKED
Starting calculation of factor esg_composite for NVDA
🌱 Analyzing ESG impact for NVDA (Technology)
✅ Factor esg_composite for NVDA: 0.6300 (calculated in 0ms)
✅ ESG composite score for NVDA: 0.630 - TRACKED
Starting calculation of factor short_interest_composite for NVDA
📊 Using pre-fetched short interest data for NVDA: score 0.50125
✅ Factor short_interest_composite for NVDA: 0.5012 (calculated in 0ms)
✅ Short interest composite for NVDA: 0.501 - TRACKED
Starting calculation of factor extended_market_composite for NVDA
💹 Using pre-fetched extended market data for NVDA: status market-hours
✅ Factor extended_market_composite for NVDA: 0.9170 (calculated in 0ms)
✅ Extended market composite for NVDA: 0.917 - TRACKED
✅ Options composite for NVDA: 0.747 - TRACKED
Starting calculation of factor put_call_ratio_score for NVDA
✅ Factor put_call_ratio_score for NVDA: 1.0037 (calculated in 0ms)
✅ Put/Call ratio score for NVDA: 1.004 - TRACKED
Starting calculation of factor options_flow_score for NVDA
✅ Factor options_flow_score for NVDA: 0.7374 (calculated in 0ms)
✅ Options flow score for NVDA: 0.737 - TRACKED
Starting calculation of factor max_pain_score for NVDA
⚠️ Factor max_pain_score for NVDA: returned null/NaN (0ms)
Starting calculation of factor iv_percentile_score for NVDA
✅ Factor iv_percentile_score for NVDA: 0.6250 (calculated in 0ms)
✅ IV percentile score for NVDA: 0.625 - TRACKED
Starting calculation of factor volume_divergence_score for NVDA
⚠️ Factor volume_divergence_score for NVDA: returned null/NaN (0ms)
Successfully calculated score for NVDA: 0.7459936984091335
Calculated scores for 1 stocks
📊 Progress update: technical 92%
📊 Analyst Consensus Data: {
  consensus: 'Buy',
  sentimentScore: 3.7,
  totalAnalysts: 79,
  distribution: { strongBuy: 2, buy: 58, hold: 16, sell: 3, strongSell: 0 },
  percentages: { buy: '75.9', hold: '20.3', sell: '3.8' },
  baseRecommendation: 'BUY',
  normalizedScore: 0.7459936984091335
}
🚀 UPGRADE: BUY → STRONG_BUY (sentiment: 3.7, buy%: 75.9)
Selected 1 stocks after applying criteria
🔍 enhanceSingleStockResult START for NVDA
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
[2025-10-10T17:25:24.640Z] DEBUG [FinancialDataService] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:25:24.640Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getFundamentalRatios
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:25:24.640Z] DEBUG [api.financial-modeling-prep] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 15000,
  "retries": 2
}
⚠️ getExtendedHoursData should use ExtendedMarketDataService, not FinancialDataService
[2025-10-10T17:25:24.646Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T17:25:24.646Z] DEBUG [FinancialDataService] Optimal source selection for stock_price
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:25:24.646Z] DEBUG [FinancialDataService] Trying Financial Modeling Prep for NVDA
[2025-10-10T17:25:24.646Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getStockPrice
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T17:25:24.647Z] DEBUG [FinancialDataService] Starting API call: getMarketData
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T17:25:24.647Z] DEBUG [FinancialDataService] Optimal source selection for market_data
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T17:25:24.647Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getMarketData
Metadata: {
  "timeout": 15000,
  "retries": 1
}
📦 Using cached company info for NVDA (24h cache)
[2025-10-10T17:25:24.745Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 99ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 99,
  "attempts": 1
}
[2025-10-10T17:25:24.745Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 99ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 99,
  "symbol": "NVDA",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:25:24.745Z] DEBUG [FMPCacheManager] Cache entry set for fmp:stock_price:NVDA
Metadata: {
  "dataType": "stock_price",
  "ttl": "60s",
  "compressed": false,
  "size": "0.3KB"
}
[2025-10-10T17:25:24.745Z] DEBUG [FinancialDataService] Stock price cached for NVDA
Metadata: {
  "ttl": "60s"
}
[2025-10-10T17:25:24.745Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 99ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 99,
  "attempts": 1
}
[2025-10-10T17:25:24.749Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getMarketData completed in 102ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getMarketData",
  "duration": 102,
  "attempts": 1
}
[2025-10-10T17:25:24.749Z] DEBUG [FinancialDataService] Performance: getMarketData completed in 102ms
Metadata: {
  "type": "performance",
  "operation": "getMarketData",
  "duration": 102,
  "attempts": 1
}
[2025-10-10T17:25:24.750Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:25:24.755Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[2025-10-10T17:25:24.755Z] INFO [FinancialDataService] Analyst ratings from FMP for NVDA
Metadata: {
  "consensus": "Buy",
  "totalAnalysts": 79
}
[2025-10-10T17:25:24.769Z] WARN [api.financial-modeling-prep] Invalid ratios response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T17:25:24.769Z] WARN [api.financial-modeling-prep] Invalid metrics response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T17:25:24.769Z] DEBUG [api.financial-modeling-prep] Performance: getFundamentalRatios completed in 129ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 129,
  "attempts": 1
}
[2025-10-10T17:25:24.769Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getFundamentalRatios completed in 129ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getFundamentalRatios",
  "duration": 129,
  "attempts": 1
}
[2025-10-10T17:25:24.770Z] INFO [FinancialDataService] Fundamental ratios from Financial Modeling Prep for NVDA
Metadata: {
  "peRatio": "39.90",
  "pbRatio": "36.66",
  "source": "Financial Modeling Prep"
}
[2025-10-10T17:25:24.770Z] DEBUG [FinancialDataService] Performance: getFundamentalRatios completed in 130ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 130,
  "attempts": 1
}
[2025-10-10T17:25:24.770Z] DEBUG [FMPCacheManager] Cache entry set for fmp:fundamental_ratios:NVDA
Metadata: {
  "dataType": "fundamental_ratios",
  "ttl": "3600s",
  "compressed": false,
  "size": "0.8KB"
}
[2025-10-10T17:25:24.770Z] DEBUG [FinancialDataService] Cached fundamental ratios for NVDA
Missing market data for NVDA - continuing with available data
Enhanced factors for utilization: [fundamentalScore, technicalScore, technicalAnalysis, technical, put_call_ratio_score]
Primary factors extracted for NVDA: [
  'fundamentalScore',
  'technicalScore',
  'technicalAnalysis',
  'technical',
  'put_call_ratio_score'
]
📈 Options analysis completed for NVDA: P/C ratio 0.19080865044624523
🔍 ESD Check for NVDA: includeEarlySignal=true
⏭️ ESD skipped for NVDA (feature not enabled in request options)
🔍 Price Prediction Check for NVDA: includePricePrediction=undefined
⏭️ Price Prediction skipped for NVDA (feature not enabled in request options)
🔍 Sentiment-Fusion Check for NVDA: includeSentimentFusion=true
⏭️ Sentiment-Fusion skipped for NVDA (feature not enabled in request options)
📊 Analyst Consensus Data: {
  consensus: 'Buy',
  sentimentScore: 3.7,
  totalAnalysts: 79,
  distribution: { strongBuy: 2, buy: 58, hold: 16, sell: 3, strongSell: 0 },
  percentages: { buy: '75.9', hold: '20.3', sell: '3.8' },
  baseRecommendation: 'BUY',
  normalizedScore: 0.7459936984091335
}
🚀 UPGRADE: BUY → STRONG_BUY (sentiment: 3.7, buy%: 75.9)
🔍 Service utilization for technicalAnalysis: 1/1 = 100%
🔍 Service utilization for fundamentals: 1/1 = 100%
🔍 Service utilization for macroeconomicAnalysis: 1/1 = 100%
🔍 Service utilization for sentimentAnalysis: 1/1 = 100%
🔍 Service utilization for vwapAnalysis: 1/1 = 100%
🔍 vwapAnalysis utilization debug: 1/1 stocks detected
  NVDA: relevant factors: [ 'vwap_deviation_score', 'vwap_trading_signals' ]
    vwap_deviation_score: 0.7 (neutral=0.5, used=true)
    vwap_trading_signals: 0.36 (neutral=0.5, used=true)
🔍 Service utilization for esgAnalysis: 1/1 = 100%
🔍 Service utilization for shortInterestAnalysis: 1/1 = 100%
🔍 shortInterestAnalysis utilization debug: 1/1 stocks detected
  NVDA: relevant factors: [ 'short_interest_composite' ]
    short_interest_composite: 0.50125 (neutral=0.5, used=true)
🔍 Service utilization for optionsAnalysis: 1/1 = 100%
Actual cache hit rate: 0/0 = 0.0%
[2025-10-10T17:25:24.772Z] DEBUG [MLEnhancedStockSelectionService] Extracting features for 1 symbols
📰 Analyzing sentiment impact for NVDA (Technology)
[2025-10-10T17:25:24.807Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:25:24.817Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 60 earnings records for NVDA
[FeatureExtractor] Sample earnings date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for NVDA: 61.19%
[2025-10-10T17:25:24.850Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 40 quarterly income statements for NVDA
[FeatureExtractor] Sample income date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for NVDA: -13.44% (recent: 33.24%, prev: 46.68%)
[2025-10-10T17:25:24.872Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:25:24.890Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
Feature extraction for NVDA completed in 119ms
[2025-10-10T17:25:24.891Z] DEBUG [MLEnhancedStockSelectionService] Feature extraction completed in 119ms
[2025-10-10T17:25:24.891Z] INFO [RealTimePredictionEngine] [predictEnsemble] Starting ensemble prediction for NVDA
[2025-10-10T17:25:24.902Z] DEBUG [ModelRegistry] Listed 3 models
Metadata: {
  "latency": 11,
  "filter": {
    "status": "deployed"
  }
}
[2025-10-10T17:25:24.903Z] INFO [RealTimePredictionEngine] [predictEnsemble] Found 3 deployed models
Metadata: {
  "models": [
    "sentiment-fusion v1.1.0",
    "price-prediction v1.1.0",
    "early-signal v1.0.0"
  ]
}
[2025-10-10T17:25:24.903Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running sentiment-fusion v1.1.0
[2025-10-10T17:25:24.904Z] DEBUG [api.polygon] Fetching news from Polygon
Metadata: {
  "ticker": "NVDA",
  "dateRange": {
    "from": "2025-10-03",
    "to": "2025-10-10"
  },
  "limit": 100
}
[2025-10-10T17:25:24.907Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running price-prediction v1.1.0
[2025-10-10T17:25:24.907Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running early-signal v1.0.0
📰 Analyzing sentiment impact for NVDA (Technology)
✅ Historical cache HIT: NVDA 2025-10-10
✅ Historical cache HIT: NVDA 2025-10-10
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: SPY latest
✅ Historical cache HIT: ^VIX latest
📊 Returning cached macro context (9ms)
✅ Historical cache HIT: NVDA latest
[2025-10-10T17:25:24.944Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:25:24.945Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T17:25:24.947Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[FeatureExtractor] Got 60 earnings records for NVDA
[FeatureExtractor] Sample earnings date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for NVDA: 61.19%
[2025-10-10T17:25:24.990Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 40 quarterly income statements for NVDA
[FeatureExtractor] Sample income date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for NVDA: -13.44% (recent: 33.24%, prev: 46.68%)
✅ Historical cache HIT: XLK latest
[PriceFeatureExtractor] Extracted 43 features for NVDA in 113ms
[2025-10-10T17:25:25.025Z] INFO [RealTimePredictionEngine] [predictEnsemble] price-prediction: BULLISH (42.3% confident)
[2025-10-10T17:25:25.029Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[2025-10-10T17:25:25.053Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
Feature extraction for NVDA completed in 145ms
[2025-10-10T17:25:25.055Z] INFO [RealTimePredictionEngine] [predictEnsemble] early-signal: NEUTRAL (48.4% confident)
[2025-10-10T17:25:25.122Z] INFO [api.polygon] Successfully fetched news from Polygon
Metadata: {
  "ticker": "NVDA",
  "articleCount": 100,
  "hasNextPage": true
}
Feature extraction for NVDA completed in 220ms
[2025-10-10T17:25:25.127Z] INFO [RealTimePredictionEngine] [predictEnsemble] sentiment-fusion: BEARISH (66.1% confident)
[2025-10-10T17:25:25.127Z] INFO [RealTimePredictionEngine] [predictEnsemble] Consensus for NVDA: NEUTRAL (29.2% confident) [LOW CONSENSUS - MODELS DISAGREE]
Metadata: {
  "breakdown": {
    "bullish": 0.3333333333333333,
    "bearish": 0.3333333333333333,
    "neutral": 0.3333333333333333
  },
  "votes": [
    "sentiment-fusion: BEARISH",
    "price-prediction: BULLISH",
    "early-signal: NEUTRAL"
  ],
  "lowConsensus": true
}
[2025-10-10T17:25:25.127Z] DEBUG [MLEnhancedStockSelectionService] Fetched 1/1 ML predictions
[2025-10-10T17:25:25.127Z] DEBUG [EnhancedScoringEngine] ML confidence 0.2924653398972742 below threshold 0.5, using reduced weight
[2025-10-10T17:25:25.129Z] DEBUG [EnhancedScoringEngine] ML confidence 0.2924653398972742 below threshold 0.5, using reduced weight
[2025-10-10T17:25:25.130Z] INFO [MLEnhancedStockSelectionService] ML enhancement completed: 1 predictions, 36265ms latency
📊 Progress update: complete 100%
✅ Comprehensive analysis completed in 36268ms { success: true, topSelections: 1, analysisInputServices: 11 }
🔍 DEBUG factorScores for NVDA: {
  "composite": 0.7459936984091335,
  "technical_overall_score": 0.33,
  "technicalScore": 33,
  "quality_composite": 0.9814040111111111,
  "fundamentalScore": 50,
  "analystScore": 0.7133544303797468,
  "momentum_composite": 0.6279586836777694,
  "value_composite": 0.13358706833333334,
  "volatility_30d": 0.7035540983061572,
  "sentiment_composite": 0.6117619989367359,
  "vwap_deviation_score": 0.7,
  "vwap_trading_signals": 0.36,
  "macroeconomic_sector_impact": 0.9,
  "macroeconomic_composite": 1,
  "esg_composite": 0.63,
  "short_interest_composite": 0.50125,
  "extended_market_composite": 0.917,
  "options_composite": 0.7468653787605303,
  "put_call_ratio_score": 1.003676539821502,
  "options_flow_score": 0.73741305,
  "iv_percentile_score": 0.625
}
🔍 DEBUG overallScore: 0.7352020038164613
✅ API /stocks/analyze: Display score = 73.52 (formatted from 0.7352)
 POST /api/stocks/analyze 200 in 36297ms
[2025-10-10T17:25:25.141Z] ERROR [PredictionLogger] Failed to log prediction for NVDA: invalid input syntax for type uuid: "early_signal_1w"
[2025-10-10T17:25:25.141Z] ERROR [PredictionLogger] Failed to log prediction for NVDA: invalid input syntax for type uuid: "early_signal_1w"
 GET /api/stocks/analyze/progress/session_1760117088833_4hlfudhng 200 in 36302ms
❌ SSE connection closed for session: session_1760117088833_4hlfudhng
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 30ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 23ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 23ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 20ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 22ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 15ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 23ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 19ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 18ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 15ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 19ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 30ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 31ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 17ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 13ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 34ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 25ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 19ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 16ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 21ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 20ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 20ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 14ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 17ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 30ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 12ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 33ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 31ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 43ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 30ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 24ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 35ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 26ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 29ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 28ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 30ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 11ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 11ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 12ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 14ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 31ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 18ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 27ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 31ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 267ms
 GET /admin 200 in 270ms
 ⚠ ./app/services/ml/sentiment-fusion/SentimentFusionService.ts
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
./app/services/ml/sentiment-fusion/SentimentFusionService.ts
./app/services/stock-selection/StockSelectionService.ts
./app/services/stock-selection/MLEnhancedStockSelectionService.ts
./app/api/stocks/analyze/route.ts
 ✓ Compiled /icon.png in 169ms (642 modules)
🔗 Initializing Redis connection to localhost:6379
✅ Loaded data source states from persistent storage: [
  'sec_edgar',
  'treasury',
  'fred',
  'bls',
  'eia',
  'yahoo',
  'polygon',
  'twelvedata'
]
🔧 Admin access granted in development mode
🔗 Initializing Redis connection to localhost:6379
✅ Redis connected successfully
✅ Redis connected successfully
 GET /icon.png?609a3f8802fe29ba 200 in 430ms
🚀 Redis ready for operations
🚀 Redis ready for operations
✅ Loaded ML feature: Early Signal Detection (current: enabled)
✅ Loaded ML feature: Price Prediction (current: enabled)
✅ Loaded ML feature: Sentiment-Fusion Price Prediction (current: enabled)
 GET /api/admin/ml-feature-toggles 200 in 1357ms
 ✓ Compiled /api/stocks/search in 85ms (644 modules)
🔗 Initializing Redis connection to localhost:6379
🔍 Stock search request: "N"
📡 Cache MISS - fetching from FMP API for: "N"
✅ Redis connected successfully
🚀 Redis ready for operations
✅ Found 20 results for "N" (cached for 5 min)
 GET /api/stocks/search?query=N 200 in 938ms
🔍 Stock search request: "NF"
📡 Cache MISS - fetching from FMP API for: "NF"
✅ Found 20 results for "NF" (cached for 5 min)
 GET /api/stocks/search?query=NF 200 in 115ms
🔍 Stock search request: "NFD"
📡 Cache MISS - fetching from FMP API for: "NFD"
✅ Found 2 results for "NFD" (cached for 5 min)
 GET /api/stocks/search?query=NFD 200 in 67ms
🔍 Stock search request: "NV"
📡 Cache MISS - fetching from FMP API for: "NV"
✅ Found 20 results for "NV" (cached for 5 min)
 GET /api/stocks/search?query=NV 200 in 84ms
🔍 Stock search request: "NVDA"
📡 Cache MISS - fetching from FMP API for: "NVDA"
✅ Found 13 results for "NVDA" (cached for 5 min)
 GET /api/stocks/search?query=NVDA 200 in 57ms
 ⚠ ./app/services/ml/sentiment-fusion/SentimentFusionService.ts
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
./app/services/ml/sentiment-fusion/SentimentFusionService.ts
./app/services/stock-selection/StockSelectionService.ts
./app/services/stock-selection/MLEnhancedStockSelectionService.ts
./app/api/stocks/analyze/route.ts
 ⚠ ./app/services/ml/sentiment-fusion/SentimentFusionService.ts
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
./app/services/ml/sentiment-fusion/SentimentFusionService.ts
./app/services/stock-selection/StockSelectionService.ts
./app/services/stock-selection/MLEnhancedStockSelectionService.ts
./app/api/stocks/analyze/route.ts
 ⚠ ./app/services/ml/sentiment-fusion/SentimentFusionService.ts
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
./app/services/ml/sentiment-fusion/SentimentFusionService.ts
./app/services/stock-selection/StockSelectionService.ts
./app/services/stock-selection/MLEnhancedStockSelectionService.ts
./app/api/stocks/analyze/route.ts
📡 SSE connection established for session: session_1760124683165_h4sl1hfct
✅ SSE session session_1760124683165_h4sl1hfct initialized
🔗 Initializing Redis connection to localhost:6379
[2025-10-10T19:31:23.678Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T19:31:23.678Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
[2025-10-10T19:31:23.733Z] INFO [ModelCache] ModelCache initialized
Metadata: {
  "config": {
    "maxCachedModels": 5,
    "enableLRU": true,
    "maxLoadTimeMs": 50,
    "enableMetrics": true,
    "warmCacheOnStartup": false
  }
}
🔬 Starting comprehensive analysis via StockSelectionService...
📦 Request body keys: [ 'mode', 'limit', 'include_ml', 'ml_horizon', 'symbols', 'sessionId' ]
📦 Raw sessionId from body: session_1760124683165_h4sl1hfct
🎯 Validated sessionId: session_1760124683165_h4sl1hfct
🎯 SessionId type: string
✅ Initializing ProgressTracker for session: session_1760124683165_h4sl1hfct
📊 Progress update: init 1%
✅ Started 'init' stage
📊 Progress update: init 1%
🔗 Initializing Redis connection to localhost:6379
[2025-10-10T19:31:23.749Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T19:31:23.749Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
✅ ESG Data Service initialized with API key
🏭 MacroeconomicAnalysisService initialized with data source orchestration
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
✅ ESG Data Service initialized with API key
✅ Short Interest Service initialized with Polygon API integration
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
🔗 Initializing Redis connection to localhost:6379
✅ ESG Data Service initialized with API key
[2025-10-10T19:31:23.752Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T19:31:23.752Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
🔗 Initializing Redis connection to localhost:6379
[2025-10-10T19:31:23.753Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T19:31:23.753Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
[2025-10-10T19:31:23.753Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T19:31:23.753Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
[2025-10-10T19:31:23.753Z] INFO [FinancialDataService] FMP initialized as primary data source
Metadata: {
  "rateLimit": "300/minute",
  "priority": 1
}
[2025-10-10T19:31:23.753Z] INFO [FinancialDataService] Financial Data Service initialized with 1 authorized sources
Metadata: {
  "sources": [
    {
      "priority": 1,
      "name": "Financial Modeling Prep",
      "rateLimit": 300
    }
  ]
}
🔗 Initializing Redis connection to localhost:6379
Reddit API Enhanced initialized for multi-subreddit sentiment analysis
Options Analysis Service initialized for options sentiment analysis
🏭 MacroeconomicAnalysisService initialized with data source orchestration
[2025-10-10T19:31:23.753Z] INFO [PredictionLogger] PredictionLogger initialized
[2025-10-10T19:31:23.754Z] INFO [MLEnhancedStockSelectionService] MLEnhancedStockSelectionService initialized with prediction logging
✅ Comprehensive MLEnhancedStockSelectionService initialized (Phase 4.1 - ML enhancement layer active)
📊 Progress update: init 2%
🔗 Initializing Redis connection to localhost:6379
 ○ Compiling /api/stocks/analyze/progress/[sessionId] ...
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
✅ Redis connected successfully
[2025-10-10T19:31:23.757Z] DEBUG [api.historical-cache] Historical cache directories initialized
Metadata: {
  "baseDir": "/Users/michaellocke/WebstormProjects/Home/public/vfr-api/data/cache/historical"
}
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
🚀 Redis ready for operations
✅ Loaded ML feature: Early Signal Detection (current: enabled)
✅ Loaded ML feature: Price Prediction (current: enabled)
✅ Loaded ML feature: Sentiment-Fusion Price Prediction (current: enabled)
🔍 /api/stocks/analyze - ESD Toggle: true, Sentiment-Fusion Toggle: true, ML Enhancement: true
📊 Executing comprehensive stock analysis: {
  mode: 'single_stock',
  symbols: [ 'NVDA' ],
  sector: undefined,
  requestId: 'admin_test_1760124684758_yi38rj5sj',
  withProgressTracking: true
}
[2025-10-10T19:31:24.758Z] INFO [MLEnhancedStockSelectionService] ML enhancement enabled for request: NVDA
[2025-10-10T19:31:24.758Z] INFO [RealTimePredictionEngine] Initializing RealTimePredictionEngine
[2025-10-10T19:31:24.767Z] INFO [ModelRegistry] ModelRegistry initialized successfully
[2025-10-10T19:31:24.773Z] INFO [FeatureStore] FeatureStore initialized successfully
[2025-10-10T19:31:24.773Z] INFO [RealTimePredictionEngine] RealTimePredictionEngine initialized successfully
🔍 executeSingleStockAnalysis START
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
🔍 Cache check for NVDA: HIT
🔍 Cache HIT for NVDA - validating price freshness...
[2025-10-10T19:31:24.775Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T19:31:24.775Z] DEBUG [FinancialDataService] Optimal source selection for stock_price
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T19:31:24.775Z] DEBUG [FinancialDataService] Trying Financial Modeling Prep for NVDA
[2025-10-10T19:31:24.775Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getStockPrice
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T19:31:24.876Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 101ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 101,
  "attempts": 1
}
[2025-10-10T19:31:24.877Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 102ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 102,
  "symbol": "NVDA",
  "source": "Financial Modeling Prep"
}
[2025-10-10T19:31:24.877Z] DEBUG [FMPCacheManager] Cache entry set for fmp:stock_price:NVDA
Metadata: {
  "dataType": "stock_price",
  "ttl": "60s",
  "compressed": false,
  "size": "0.3KB"
}
[2025-10-10T19:31:24.877Z] DEBUG [FinancialDataService] Stock price cached for NVDA
Metadata: {
  "ttl": "60s"
}
[2025-10-10T19:31:24.877Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 102ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 102,
  "attempts": 1
}
🔍 Price changed for NVDA: $187.68 → $186.47 (-0.64%) - invalidating cache
🔍 No cache or price invalidated, proceeding with fresh analysis for NVDA
Redis connected
Fetching configuration composite from database
Creating default composite algorithm configuration WITH SINGLE COMPOSITE FACTOR
🔧 Building customized config for: composite
📋 Base config keys: [
  'id',
  'name',
  'description',
  'type',
  'enabled',
  'selectionCriteria',
  'universe',
  'weights',
  'selection',
  'risk',
  'dataFusion',
  'metadata'
]
🌌 Base universe: { maxPositions: 40, marketCapMin: 500000000 }
✅ Universe config built successfully: { maxPositions: 1, marketCapMin: 500000000, excludeSymbols: [] }
No data sources available in service config, using default
Using symbols from context: [NVDA]
Algorithm Composite Analysis Algorithm: Evaluating 1 stocks
📊 Progress update: market_data 5%
📊 Using optimized batch size: 10 (FMP Starter: true)
Fetching fresh market data for NVDA...
[2025-10-10T19:31:24.881Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T19:31:24.881Z] DEBUG [FinancialDataService] Stock price cache hit for NVDA
Metadata: {
  "age": "1s"
}
[2025-10-10T19:31:24.881Z] DEBUG [FinancialDataService] Starting API call: getMarketData
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T19:31:24.881Z] DEBUG [FinancialDataService] Optimal source selection for market_data
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 1
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T19:31:24.881Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getMarketData
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T19:31:24.882Z] DEBUG [FinancialDataService] Starting API call: getCompanyInfo
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T19:31:24.882Z] DEBUG [FinancialDataService] Optimal source selection for company_info
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 1
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T19:31:24.882Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getCompanyInfo
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T19:31:24.883Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 2ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 2,
  "attempts": 1
}
[2025-10-10T19:31:24.906Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getMarketData completed in 25ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getMarketData",
  "duration": 25,
  "attempts": 1
}
[2025-10-10T19:31:24.906Z] DEBUG [FinancialDataService] Performance: getMarketData completed in 25ms
Metadata: {
  "type": "performance",
  "operation": "getMarketData",
  "duration": 25,
  "attempts": 1
}
[2025-10-10T19:31:24.960Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getCompanyInfo completed in 78ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getCompanyInfo",
  "duration": 78,
  "attempts": 1
}
[2025-10-10T19:31:24.960Z] DEBUG [FinancialDataService] Performance: getCompanyInfo completed in 78ms
Metadata: {
  "type": "performance",
  "operation": "getCompanyInfo",
  "duration": 78,
  "attempts": 1
}
Got stock data for NVDA: price=186.47, volume=196184890
✅ Market data fetched for 1/1 symbols (100.0% success rate)
Fetched market data for 1 stocks
📊 Progress update: market_data 7%
📊 Progress update: fundamentals 12%
[2025-10-10T19:31:24.961Z] DEBUG [FinancialDataService] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T19:31:24.961Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getFundamentalRatios
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T19:31:24.961Z] DEBUG [api.financial-modeling-prep] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 15000,
  "retries": 2
}
[2025-10-10T19:31:24.997Z] WARN [api.financial-modeling-prep] Invalid ratios response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T19:31:24.997Z] WARN [api.financial-modeling-prep] Invalid metrics response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T19:31:24.997Z] DEBUG [api.financial-modeling-prep] Performance: getFundamentalRatios completed in 36ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 36,
  "attempts": 1
}
[2025-10-10T19:31:24.997Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getFundamentalRatios completed in 36ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getFundamentalRatios",
  "duration": 36,
  "attempts": 1
}
[2025-10-10T19:31:24.997Z] INFO [FinancialDataService] Fundamental ratios from Financial Modeling Prep for NVDA
Metadata: {
  "peRatio": "39.90",
  "pbRatio": "36.66",
  "source": "Financial Modeling Prep"
}
[2025-10-10T19:31:24.997Z] DEBUG [FinancialDataService] Performance: getFundamentalRatios completed in 36ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 36,
  "attempts": 1
}
[2025-10-10T19:31:24.997Z] DEBUG [FMPCacheManager] Cache entry set for fmp:fundamental_ratios:NVDA
Metadata: {
  "dataType": "fundamental_ratios",
  "ttl": "3600s",
  "compressed": false,
  "size": "0.8KB"
}
[2025-10-10T19:31:24.997Z] DEBUG [FinancialDataService] Cached fundamental ratios for NVDA
[2025-10-10T19:31:24.997Z] DEBUG [FinancialDataService] Starting API call: getCompanyInfo
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T19:31:24.997Z] DEBUG [FinancialDataService] Optimal source selection for company_info
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 3
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T19:31:24.997Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getCompanyInfo
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T19:31:25.093Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getCompanyInfo completed in 95ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getCompanyInfo",
  "duration": 95,
  "attempts": 1
}
[2025-10-10T19:31:25.093Z] DEBUG [FinancialDataService] Performance: getCompanyInfo completed in 96ms
Metadata: {
  "type": "performance",
  "operation": "getCompanyInfo",
  "duration": 96,
  "attempts": 1
}
Fetched fundamental data for 1 stocks
📊 Progress update: fundamentals 17%
📊 Progress update: technical 21%
Processing symbol NVDA, marketData keys: [NVDA]
Calculating score for NVDA with market data: { price: 186.47, volume: 196184890 }
Starting score calculation for NVDA, weights count: 1
🎯 COMPOSITE ALGORITHM DETECTED - Using enhanced composite factor calculation
📊 Progress update: technical 25%
📊 Progress update: analyst 28%
[2025-10-10T19:31:25.128Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[2025-10-10T19:31:25.128Z] INFO [FinancialDataService] Analyst ratings from FMP for NVDA
Metadata: {
  "consensus": "Buy",
  "totalAnalysts": 79
}
📊 Analyst data pre-fetched for sentiment: Buy (79 analysts, 3.7/5)
📊 Progress update: analyst 30%
🚀 Fetching NVDA data from 7 sources in parallel...
📊 Progress update: sentiment 36%
📰 Pre-fetching sentiment data for NVDA...
📊 Progress update: vwap 39%
📊 Pre-fetching VWAP analysis for NVDA...
📊 Progress update: macro 43%
🌍 Pre-fetching macroeconomic context for NVDA (Technology)...
📊 Progress update: esg 46%
🌱 Pre-fetching ESG data for NVDA (Technology)...
📊 Progress update: short_interest 49%
📊 Pre-fetching short interest data for NVDA (Technology)...
📊 Progress update: extended_hours 51%
🕒 Pre-fetching extended market data for NVDA...
📊 Progress update: options 61%
📊 Pre-fetching options data for NVDA...
📊 Progress update: options 61%
✅ ESG Data Service initialized with API key
🌱 Analyzing ESG impact for NVDA (Technology)
✅ Short Interest Service initialized with Polygon API integration
📊 Analyzing short interest impact for NVDA (Technology)
🔗 Initializing Redis connection to localhost:6379
📊 Progress update: options 61%
🦄 EODHD: Fetching UnicornBay options analysis for NVDA
🦄 EODHD UnicornBay: Fetching enhanced options chain for NVDA
🦄 EODHD UnicornBay: Constructed URL for NVDA: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=NVDA&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🔗 EODHD API: Fetching options chain for NVDA
🦄 Attempting UnicornBay enhanced options data for NVDA
🦄 EODHD UnicornBay: Fetching enhanced options chain for NVDA
🦄 EODHD UnicornBay: Constructed URL for NVDA: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=NVDA&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🔗 Initializing Redis connection to localhost:6379
📰 Sentiment pre-fetched for NVDA: 0.6117619989367359
📊 Progress update: sentiment 67%
🔍 Fetching fresh macroeconomic context with parallel processing...
🔍 Getting latest observation for PET.RWTC.D...
🔍 Getting latest observation for PET.RBRTE.D...
🔍 Getting latest observation for NG.RNGWHHD.D...
🔍 Getting latest observation for PET.EMM_EPMR_PTE_NUS_DPG.W...
📊 Short interest data for NVDA retrieved from cache
📊 Short interest pre-fetched for NVDA: score 0.501, impact neutral
📊 Progress update: short_interest 70%
🌱 ESG pre-fetched for NVDA: 0.630
📊 Progress update: esg 73%
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
📊 Returning cached economic context
🔍 Analyzing inflation trends...
🔍 Analyzing monetary policy context...
🔍 Analyzing economic cycle position...
📦 BLS cache HIT for LNS14000000 (TTL: 43200s)
📦 BLS cache HIT for LNS14000000 (TTL: 43200s)
🔄 EIA cache MISS for seriesid/PET.RWTC.D - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/PET.RWTC.D?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
🔄 EIA cache MISS for seriesid/PET.RBRTE.D - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/PET.RBRTE.D?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
🔄 EIA cache MISS for seriesid/NG.RNGWHHD.D - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/NG.RNGWHHD.D?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
🔄 EIA cache MISS for seriesid/PET.EMM_EPMR_PTE_NUS_DPG.W - fetching from API
🌐 EIA API URL: https://api.eia.gov/v2/seriesid/PET.EMM_EPMR_PTE_NUS_DPG.W?api_key=qAU83CqOXOVXduLuhimcS5d09lFWmMW6vU67bcFJ&length=1
Unemployment trend analysis completed in 13ms
📦 FRED cache HIT for CPIAUCSL (TTL: 43200s)
🔄 FRED cache MISS for FEDFUNDS - fetching from API
🌐 FRED API URL: https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key=e093a281de7f0d224ed51ad0842fc393&file_type=json&limit=12&sort_order=desc
📦 FRED cache HIT for M1SL (TTL: 86400s)
📦 FRED cache HIT for M2SL (TTL: 86400s)
📦 FRED cache HIT for M2V (TTL: 86400s)
📦 FRED cache HIT for GDPC1 (TTL: 43200s)
📦 BLS cache HIT for CES0000000001 (TTL: 43200s)
📦 FRED cache HIT for PPIACO (TTL: 43200s)
🔄 FRED cache MISS for T10Y2Y - fetching from API
🌐 FRED API URL: https://api.stlouisfed.org/fred/series/observations?series_id=T10Y2Y&api_key=e093a281de7f0d224ed51ad0842fc393&file_type=json&limit=20&sort_order=desc
📦 BLS cache HIT for LNS12300000 (TTL: 43200s)
🔄 FRED cache MISS for FEDFUNDS - fetching from API
🌐 FRED API URL: https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key=e093a281de7f0d224ed51ad0842fc393&file_type=json&limit=5&sort_order=desc
📦 BLS cache HIT for CES0000000001 (TTL: 43200s)
Payroll momentum analysis completed in 1ms
Employment strength scoring completed in 19ms
📊 VWAP pre-fetched for NVDA: success
📊 Progress update: vwap 76%
⚠️ Redis not available, skipping cache set for key: spread_history:NVDA
⚠️ Redis not available, skipping cache set for key: extended_market:NVDA
🕒 Extended market data pre-fetched for NVDA: market-hours
📊 Progress update: extended_hours 78%
✅ Redis connected successfully
✅ Redis connected successfully
🚀 Redis ready for operations
🚀 Redis ready for operations
💾 Cached FRED data for FEDFUNDS (TTL: 1800s)
✅ Monetary policy analysis complete: neutral stance, very_tight liquidity
💾 Cached FRED data for T10Y2Y (TTL: 1800s)
📦 FRED cache HIT for UNRATE (TTL: 43200s)
🔄 FRED cache MISS for NFCI - fetching from API
🌐 FRED API URL: https://api.stlouisfed.org/fred/series/observations?series_id=NFCI&api_key=e093a281de7f0d224ed51ad0842fc393&file_type=json&limit=12&sort_order=desc
💾 Cached FRED data for FEDFUNDS (TTL: 1800s)
✅ Inflation analysis complete: moderate environment, stable outlook
💾 Cached FRED data for NFCI (TTL: 3600s)
✅ Economic cycle analysis complete: peak phase with 70% confidence
💾 Cached EIA data for seriesid/PET.RBRTE.D (TTL: 3600s)
📊 Response for PET.RBRTE.D: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for PET.RBRTE.D: {
  period: '2025-10-06',
  duoarea: 'ZEU',
  'area-name': 'NA',
  product: 'EPCBRENT',
  'product-name': 'UK Brent Crude Oil',
  process: 'PF4',
  'process-name': 'Spot Price FOB',
  series: 'RBRTE',
  'series-description': 'Europe Brent Spot Price FOB (Dollars per Barrel)',
  value: 67.09,
  units: '$/BBL'
}
💾 Cached EIA data for seriesid/PET.RWTC.D (TTL: 3600s)
📊 Response for PET.RWTC.D: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for PET.RWTC.D: {
  period: '2025-10-06',
  duoarea: 'YCUOK',
  'area-name': 'NA',
  product: 'EPCWTI',
  'product-name': 'WTI Crude Oil',
  process: 'PF4',
  'process-name': 'Spot Price FOB',
  series: 'RWTC',
  'series-description': 'Cushing, OK WTI Spot Price FOB (Dollars per Barrel)',
  value: 62.49,
  units: '$/BBL'
}
💾 Cached EIA data for seriesid/PET.EMM_EPMR_PTE_NUS_DPG.W (TTL: 3600s)
📊 Response for PET.EMM_EPMR_PTE_NUS_DPG.W: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for PET.EMM_EPMR_PTE_NUS_DPG.W: {
  period: '2025-10-06',
  duoarea: 'NUS',
  'area-name': 'U.S.',
  product: 'EPMR',
  'product-name': 'Regular Gasoline',
  process: 'PTE',
  'process-name': 'Retail Sales',
  series: 'EMM_EPMR_PTE_NUS_DPG',
  'series-description': 'U.S. Regular All Formulations Retail Gasoline Prices (Dollars per Gallon)',
  value: 3.124,
  units: '$/GAL'
}
✅ Loaded data source states from persistent storage: [
  'sec_edgar',
  'treasury',
  'fred',
  'bls',
  'eia',
  'yahoo',
  'polygon',
  'twelvedata'
]
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 32ms
💾 Cached EIA data for seriesid/NG.RNGWHHD.D (TTL: 3600s)
📊 Response for NG.RNGWHHD.D: {
  success: true,
  hasData: true,
  hasResponse: true,
  dataLength: 1,
  error: undefined
}
✅ Found observation for NG.RNGWHHD.D: {
  period: '2025-10-06',
  duoarea: 'RGC',
  'area-name': 'NA',
  product: 'EPG0',
  'product-name': 'Natural Gas',
  process: 'PS0',
  'process-name': 'Spot Price',
  series: 'RNGWHHD',
  'series-description': 'Henry Hub Natural Gas Spot Price (Dollars per Million Btu)',
  value: 3.32,
  units: '$/MMBTU'
}
⚡ Quick commodity snapshot in 2575ms
✅ Macro context generated in 2584ms with 100.0% efficiency
⚠️ Performance target missed: 2584ms > 800ms target
🌍 Macro context pre-fetched for NVDA: success
📊 Progress update: macro 82%
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 19ms
❌ EODHD API: Request failed (attempt 1): Error [AbortError]: This operation was aborted
    at async EODHDAPI.makeRequest (app/services/financial-data/EODHDAPI.ts:390:21)
    at async EODHDAPI.getUnicornBayOptionsChain (app/services/financial-data/EODHDAPI.ts:487:21)
    at async OptionsDataService.getOptimizedEODHDAnalysis (app/services/financial-data/OptionsDataService.ts:348:25)
    at async OptionsDataService.getOptionsAnalysis (app/services/financial-data/OptionsDataService.ts:201:19)
    at async eval (app/services/algorithms/AlgorithmEngine.ts:779:48)
    at async AlgorithmEngine.calculateSingleStockScore (app/services/algorithms/AlgorithmEngine.ts:629:9)
    at async AlgorithmEngine.calculateStockScores (app/services/algorithms/AlgorithmEngine.ts:541:19)
    at async AlgorithmEngine.executeAlgorithm (app/services/algorithms/AlgorithmEngine.ts:154:24)
    at async AlgorithmIntegration.executeAnalysis (app/services/stock-selection/integration/AlgorithmIntegration.ts:78:19)
    at async MLEnhancedStockSelectionService.executeSingleStockAnalysis (app/services/stock-selection/StockSelectionService.ts:385:27)
    at async MLEnhancedStockSelectionService.executeAnalysis (app/services/stock-selection/StockSelectionService.ts:269:12)
    at async MLEnhancedStockSelectionService.selectStocks (app/services/stock-selection/StockSelectionService.ts:220:19)
    at async MLEnhancedStockSelectionService.selectStocks (app/services/stock-selection/MLEnhancedStockSelectionService.ts:173:24)
    at async POST (app/api/stocks/analyze/route.ts:429:26)
  388 | 			const timeoutId = setTimeout(() => controller.abort(), this.timeout);
  389 |
> 390 | 			const response = await fetch(url, {
      | 			                 ^
  391 | 				signal: controller.signal,
  392 | 				headers: {
  393 | 					"User-Agent": "VFR-API/1.0", {
  code: 20,
  INDEX_SIZE_ERR: 1,
  DOMSTRING_SIZE_ERR: 2,
  HIERARCHY_REQUEST_ERR: 3,
  WRONG_DOCUMENT_ERR: 4,
  INVALID_CHARACTER_ERR: 5,
  NO_DATA_ALLOWED_ERR: 6,
  NO_MODIFICATION_ALLOWED_ERR: 7,
  NOT_FOUND_ERR: 8,
  NOT_SUPPORTED_ERR: 9,
  INUSE_ATTRIBUTE_ERR: 10,
  INVALID_STATE_ERR: 11,
  SYNTAX_ERR: 12,
  INVALID_MODIFICATION_ERR: 13,
  NAMESPACE_ERR: 14,
  INVALID_ACCESS_ERR: 15,
  VALIDATION_ERR: 16,
  TYPE_MISMATCH_ERR: 17,
  SECURITY_ERR: 18,
  NETWORK_ERR: 19,
  ABORT_ERR: 20,
  URL_MISMATCH_ERR: 21,
  QUOTA_EXCEEDED_ERR: 22,
  TIMEOUT_ERR: 23,
  INVALID_NODE_TYPE_ERR: 24,
  DATA_CLONE_ERR: 25
}
🔄 EODHD API: Retrying in 1000ms...
❌ EODHD API: Request failed (attempt 1): Error [AbortError]: This operation was aborted
    at async EODHDAPI.makeRequest (app/services/financial-data/EODHDAPI.ts:390:21)
    at async EODHDAPI.getUnicornBayOptionsChain (app/services/financial-data/EODHDAPI.ts:487:21)
    at async EODHDAPI.getOptionsChain (app/services/financial-data/EODHDAPI.ts:971:26)
    at async OptionsDataService.getOptionsChain (app/services/financial-data/OptionsDataService.ts:251:19)
    at async eval (app/services/algorithms/AlgorithmEngine.ts:779:48)
    at async AlgorithmEngine.calculateSingleStockScore (app/services/algorithms/AlgorithmEngine.ts:629:9)
    at async AlgorithmEngine.calculateStockScores (app/services/algorithms/AlgorithmEngine.ts:541:19)
    at async AlgorithmEngine.executeAlgorithm (app/services/algorithms/AlgorithmEngine.ts:154:24)
    at async AlgorithmIntegration.executeAnalysis (app/services/stock-selection/integration/AlgorithmIntegration.ts:78:19)
    at async MLEnhancedStockSelectionService.executeSingleStockAnalysis (app/services/stock-selection/StockSelectionService.ts:385:27)
    at async MLEnhancedStockSelectionService.executeAnalysis (app/services/stock-selection/StockSelectionService.ts:269:12)
    at async MLEnhancedStockSelectionService.selectStocks (app/services/stock-selection/StockSelectionService.ts:220:19)
    at async MLEnhancedStockSelectionService.selectStocks (app/services/stock-selection/MLEnhancedStockSelectionService.ts:173:24)
    at async POST (app/api/stocks/analyze/route.ts:429:26)
  388 | 			const timeoutId = setTimeout(() => controller.abort(), this.timeout);
  389 |
> 390 | 			const response = await fetch(url, {
      | 			                 ^
  391 | 				signal: controller.signal,
  392 | 				headers: {
  393 | 					"User-Agent": "VFR-API/1.0", {
  code: 20,
  INDEX_SIZE_ERR: 1,
  DOMSTRING_SIZE_ERR: 2,
  HIERARCHY_REQUEST_ERR: 3,
  WRONG_DOCUMENT_ERR: 4,
  INVALID_CHARACTER_ERR: 5,
  NO_DATA_ALLOWED_ERR: 6,
  NO_MODIFICATION_ALLOWED_ERR: 7,
  NOT_FOUND_ERR: 8,
  NOT_SUPPORTED_ERR: 9,
  INUSE_ATTRIBUTE_ERR: 10,
  INVALID_STATE_ERR: 11,
  SYNTAX_ERR: 12,
  INVALID_MODIFICATION_ERR: 13,
  NAMESPACE_ERR: 14,
  INVALID_ACCESS_ERR: 15,
  VALIDATION_ERR: 16,
  TYPE_MISMATCH_ERR: 17,
  SECURITY_ERR: 18,
  NETWORK_ERR: 19,
  ABORT_ERR: 20,
  URL_MISMATCH_ERR: 21,
  QUOTA_EXCEEDED_ERR: 22,
  TIMEOUT_ERR: 23,
  INVALID_NODE_TYPE_ERR: 24,
  DATA_CLONE_ERR: 25
}
🔄 EODHD API: Retrying in 1000ms...
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 14ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 23ms
🦄 EODHD UnicornBay: Response structure for NVDA: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for NVDA: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 54 current contracts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
📊 EODHD UnicornBay: Fetching enhanced put/call ratio for NVDA
🦄 EODHD UnicornBay: Fetching enhanced options chain for NVDA
🦄 EODHD UnicornBay: Constructed URL for NVDA: https://eodhd.com/api/mp/unicornbay/options/contracts?filter%5Bunderlying_symbol%5D=NVDA&filter%5Bexp_date_from%5D=2025-10-10&page%5Blimit%5D=200&sort=exp_date&api_token=68cf08e135b402.52970225
🦄 EODHD UnicornBay: Response structure for NVDA: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for NVDA: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 54 current contracts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
✅ Using UnicornBay enhanced data for NVDA
📋 Memory optimization: 0.0% reduction
🔗 EODHD Optimized options chain for NVDA: 54328ms
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 8ms
🦄 EODHD UnicornBay: Response structure for NVDA: {
  hasContracts: false,
  contractCount: 0,
  hasData: true,
  dataLength: 200,
  dataKeys: [ 'meta', 'data', 'links' ]
}
🦄 EODHD UnicornBay: Contracts debug for NVDA: {
  contractsType: 'object',
  contractsLength: 200,
  firstContract: [ 'id', 'type', 'attributes' ]
}
🦄 EODHD UnicornBay: Filtered 200 total to 54 current contracts for NVDA
✅ EODHD UnicornBay: Retrieved 35 calls, 19 puts for NVDA
🦄 UnicornBay analysis processed for NVDA: P/C 0.19, Sentiment: greed, Confidence: 0.54
📊 EODHD Enhanced options analysis for NVDA: 74609ms (target: 500ms)
📊 Enhanced options data pre-fetched for NVDA:
   P/C Ratio: 0.19
   IV Percentile: 5.0%
   Volume Divergence: 0.00
   Max Pain: $N/A
   Sentiment: greed
📊 Progress update: options 92%
🚀 Parallel data fetch completed in 74611ms (estimated sequential: ~149222ms)
Starting calculation of factor composite for NVDA
🎯 Calculating MAIN composite score for NVDA with ALL required components
📊 PHASE 2 CALIBRATION: Adjusted weights for NVDA ($4540.1B market cap):
   Technical: 23.5% (base 28.0%, multiplier 0.85)
   Fundamental: 33.1% (base 28.0%, multiplier 1.20)
🔍 Attempting to calculate technical overall score for NVDA
Fetching 250 days of historical data for NVDA
🌐 TwelveData API URL: https://api.twelvedata.com/time_series?symbol=NVDA&interval=1day&outputsize=100&apikey=d9cb9bb2d6ef402a8311be460f983faa
TwelveData: Retrieved 100 OHLC records for NVDA
Successfully fetched 100 historical price points for NVDA
✅ Using 100 data points for technical analysis of NVDA
📊 Technical analysis result for NVDA: 33/100
Technical Analysis: 0.330 (weight: 23.5%) ⚡
Calculating quality composite for data: {
  roe: 0.918729,
  debtToEquity: 0.129464,
  currentRatio: 4.439851,
  operatingMargin: 0.624175,
  netProfitMargin: 0.55848,
  grossProfitMargin: undefined
}
Quality factor ROE: 1.000 (weight: 0.3)
Quality factor Debt/Equity: 0.974 (weight: 0.25)
Quality factor Current Ratio: 0.949 (weight: 0.2)
Quality factor Operating Margin: 1.000 (weight: 0.15)
Quality factor Gross Profit Margin: No valid data (null)
Quality composite score: 0.981 (based on 4 factors, 0.90 total weight)
Fundamental Analysis: 0.981 (weight: 33.1%) 💎
🌍 Calculating macroeconomic composite from pre-fetched data...
🌍 Macroeconomic composite score: 1.000 (confidence: 1)
🌍 Macroeconomic Analysis: 1.000 (weight: 19.7%)
📰 Sentiment Analysis: 0.612 (weight: 17.8%)
📊 Calculating options intelligence score...
   P/C Ratio: 0.19 → Score: 1.004 (30% weight)
   IV Percentile: 5.0% → Score: 0.625 (25% weight)
   Options Flow: 0.70 → Score: 0.737 (20% weight)
   Volume Divergence: 0.00 → Score: 0.300 (10% weight)
✅ Options Intelligence Score: 0.747 (85% data coverage)
📊 Options Analysis: 0.747 (weight: 2.5%)
🌱 ESG Analysis: 0.630 (weight: 1.5%)
Short Interest service not available
📊 Short Interest Analysis: 0.500 (weight: 1.5%)
Extended Market Data service not available
💹 Extended Market Data: 0.500 (weight: 0.5%)
🎯 PHASE 2 CALIBRATION - Main composite calculation for NVDA:
   Final weighted score: 0.7460
   🔍 DEBUG totalScore: 0.7466, totalWeight: 1.0008
   Weight Allocation: Technical(28.0%) + Fundamental(28.0%) + Macroeconomic(20.0%) + Sentiment(18.0%) + Alternative(6.0% = Options 2.5% + ESG 1.5% + Short Interest 1.5% + Extended Market 0.5%) = 100.0%
   ✅ WEIGHT VERIFICATION: Total weights = 1.001 (target: 1.000)
   Contributing factors: [technicalAnalysis, technical_overall_score, fundamentalData, quality_composite, macroeconomicAnalysis, macroeconomic_composite, sentimentAnalysis, sentiment_composite, optionsAnalysis, options_composite, esgAnalysis, esg_composite, shortInterestAnalysis, short_interest_composite, extendedMarketData, extended_market_composite]
   🔍 DEBUG: Returning clamped score: 0.7460 (original: 0.7460)
✅ FactorLibrary: Composite score = 0.7460 (0-1 scale) for NVDA
✅ Factor composite for NVDA: 0.7460 (calculated in 135ms)
🎯 Enhanced composite score for NVDA: 0.7459936984091335
🔍 DEBUG: compositeScore type: number, value: 0.7459936984091335, clamped: 0.7459936984091335
✅ AlgorithmEngine: Passing through score = 0.7460 (0-1 scale, NO manipulation)
✅ Technical overall score for NVDA: 0.330 (33.0) - TRACKED
Starting calculation of factor quality_composite for NVDA
Calculating quality composite for data: {
  roe: 0.918729,
  debtToEquity: 0.129464,
  currentRatio: 4.439851,
  operatingMargin: 0.624175,
  netProfitMargin: 0.55848,
  grossProfitMargin: undefined
}
Quality factor ROE: 1.000 (weight: 0.3)
Quality factor Debt/Equity: 0.974 (weight: 0.25)
Quality factor Current Ratio: 0.949 (weight: 0.2)
Quality factor Operating Margin: 1.000 (weight: 0.15)
Quality factor Gross Profit Margin: No valid data (null)
Quality composite score: 0.981 (based on 4 factors, 0.90 total weight)
✅ Factor quality_composite for NVDA: 0.9814 (calculated in 1ms)
✅ Quality composite score for NVDA: 0.981 (98.1)
✅ Fundamental score for NVDA: 50.0 - TRACKED
✅ Analyst score for NVDA: 0.7 - TRACKED
Starting calculation of factor momentum_composite for NVDA
Calculating momentum composite for NVDA
Fetching 127 days of historical data for NVDA
🌐 TwelveData API URL: https://api.twelvedata.com/time_series?symbol=NVDA&interval=1day&outputsize=100&apikey=d9cb9bb2d6ef402a8311be460f983faa
TwelveData: Retrieved 100 OHLC records for NVDA
Successfully fetched 100 historical price points for NVDA
Momentum factor 1-month momentum: 0.564 (weight: 0.25)
Momentum factor 3-month momentum: 0.663 (weight: 0.3)
Momentum factor 6-month momentum: No data available
Momentum factor RSI: No data available
Momentum factor MACD: No data available
Momentum composite score for NVDA: 0.618 (based on 0.55 total weight)
✅ Factor momentum_composite for NVDA: 0.6179 (calculated in 242ms)
Starting calculation of factor value_composite for NVDA
Calculating value composite for data: {
  peRatio: 39.898506,
  pbRatio: 36.655907,
  priceToSales: undefined,
  evEbitda: undefined,
  marketCap: 4540106825000
}
Value factor P/E Ratio: 0.229 (weight: 0.35)
Value factor P/B Ratio: 0.000 (weight: 0.25)
Value factor P/S Ratio: No valid data (null)
Value factor EV/EBITDA: No valid data (null)
Value composite score: 0.134 (based on 2 factors, 0.60 total weight)
✅ Factor value_composite for NVDA: 0.1336 (calculated in 0ms)
Starting calculation of factor volatility_30d for NVDA
Calculating 30-day volatility for NVDA
Calculated 29 daily returns for NVDA
NVDA volatility stats: {
  periods: 29,
  dailyVol: '0.0191',
  annualizedVol: '0.3034',
  meanReturn: '0.0025'
}
NVDA volatility score: 0.697 (lower volatility = higher score)
✅ Factor volatility_30d for NVDA: 0.6966 (calculated in 0ms)
✅ Sentiment score for NVDA: 0.612 - TRACKED
Starting calculation of factor vwap_deviation_score for NVDA
📊 Calculating VWAP deviation score from pre-fetched data...
✅ Factor vwap_deviation_score for NVDA: 0.9000 (calculated in 0ms)
✅ VWAP deviation score for NVDA: 0.900 - TRACKED
Starting calculation of factor vwap_trading_signals for NVDA
📊 Calculating VWAP trading signals from pre-fetched data...
📊 VWAP trading signal: below with strong strength = 0.360
✅ Factor vwap_trading_signals for NVDA: 0.3600 (calculated in 0ms)
✅ VWAP trading signals for NVDA: 0.360 - TRACKED
Starting calculation of factor vwap_trend_analysis for NVDA
📊 Calculating VWAP trend score with historical analysis...
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
📊 VWAP trend analysis for NVDA: trend=0.000, confidence=0.600, final=0.500
✅ Factor vwap_trend_analysis for NVDA: 0.5000 (calculated in 27ms)
Starting calculation of factor macroeconomic_sector_impact for NVDA
🌍 Calculating macroeconomic sector impact from pre-fetched data...
🌍 Macro sector impact for Technology: positive = 0.900
✅ Factor macroeconomic_sector_impact for NVDA: 0.9000 (calculated in 0ms)
✅ Macro sector impact for NVDA: 0.900 - TRACKED
Starting calculation of factor macroeconomic_composite for NVDA
🌍 Calculating macroeconomic composite from pre-fetched data...
🌍 Macroeconomic composite score: 1.000 (confidence: 1)
✅ Factor macroeconomic_composite for NVDA: 1.0000 (calculated in 0ms)
✅ Macroeconomic composite for NVDA: 1.000 - TRACKED
Starting calculation of factor esg_composite for NVDA
🌱 Analyzing ESG impact for NVDA (Technology)
✅ Factor esg_composite for NVDA: 0.6300 (calculated in 1ms)
✅ ESG composite score for NVDA: 0.630 - TRACKED
Starting calculation of factor short_interest_composite for NVDA
📊 Using pre-fetched short interest data for NVDA: score 0.50125
✅ Factor short_interest_composite for NVDA: 0.5012 (calculated in 0ms)
✅ Short interest composite for NVDA: 0.501 - TRACKED
Starting calculation of factor extended_market_composite for NVDA
💹 Using pre-fetched extended market data for NVDA: status market-hours
✅ Factor extended_market_composite for NVDA: 0.9170 (calculated in 0ms)
✅ Extended market composite for NVDA: 0.917 - TRACKED
✅ Options composite for NVDA: 0.747 - TRACKED
Starting calculation of factor put_call_ratio_score for NVDA
✅ Factor put_call_ratio_score for NVDA: 1.0037 (calculated in 0ms)
✅ Put/Call ratio score for NVDA: 1.004 - TRACKED
Starting calculation of factor options_flow_score for NVDA
✅ Factor options_flow_score for NVDA: 0.7374 (calculated in 0ms)
✅ Options flow score for NVDA: 0.737 - TRACKED
Starting calculation of factor max_pain_score for NVDA
⚠️ Factor max_pain_score for NVDA: returned null/NaN (0ms)
Starting calculation of factor iv_percentile_score for NVDA
✅ Factor iv_percentile_score for NVDA: 0.6250 (calculated in 0ms)
✅ IV percentile score for NVDA: 0.625 - TRACKED
Starting calculation of factor volume_divergence_score for NVDA
⚠️ Factor volume_divergence_score for NVDA: returned null/NaN (0ms)
Successfully calculated score for NVDA: 0.7459936984091335
Calculated scores for 1 stocks
📊 Progress update: technical 92%
📊 Analyst Consensus Data: {
  consensus: 'Buy',
  sentimentScore: 3.7,
  totalAnalysts: 79,
  distribution: { strongBuy: 2, buy: 58, hold: 16, sell: 3, strongSell: 0 },
  percentages: { buy: '75.9', hold: '20.3', sell: '3.8' },
  baseRecommendation: 'BUY',
  normalizedScore: 0.7459936984091335
}
🚀 UPGRADE: BUY → STRONG_BUY (sentiment: 3.7, buy%: 75.9)
Selected 1 stocks after applying criteria
🔍 enhanceSingleStockResult START for NVDA
🔍 request.options: {
  "algorithmId": "composite",
  "useRealTimeData": true,
  "includeSentiment": true,
  "includeNews": true,
  "includeEarlySignal": true,
  "includeSentimentFusion": true,
  "riskTolerance": "moderate",
  "timeout": 90000,
  "include_ml": true,
  "ml_horizon": "1w",
  "ml_confidence_threshold": 0.5,
  "ml_weight": 0.15
}
[2025-10-10T19:32:40.149Z] DEBUG [FinancialDataService] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T19:32:40.150Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getFundamentalRatios
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T19:32:40.150Z] DEBUG [api.financial-modeling-prep] Starting API call: getFundamentalRatios
Metadata: {
  "timeout": 15000,
  "retries": 2
}
⚠️ getExtendedHoursData should use ExtendedMarketDataService, not FinancialDataService
[2025-10-10T19:32:40.153Z] DEBUG [FinancialDataService] Starting API call: getStockPrice
Metadata: {
  "timeout": 30000,
  "retries": 2
}
[2025-10-10T19:32:40.153Z] DEBUG [FinancialDataService] Optimal source selection for stock_price
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T19:32:40.154Z] DEBUG [FinancialDataService] Trying Financial Modeling Prep for NVDA
[2025-10-10T19:32:40.154Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getStockPrice
Metadata: {
  "timeout": 15000,
  "retries": 1
}
[2025-10-10T19:32:40.154Z] DEBUG [FinancialDataService] Starting API call: getMarketData
Metadata: {
  "timeout": 20000,
  "retries": 1
}
[2025-10-10T19:32:40.154Z] DEBUG [FinancialDataService] Optimal source selection for market_data
Metadata: {
  "selectedSources": [
    {
      "name": "Financial Modeling Prep",
      "priority": 1,
      "rateLimit": 300,
      "currentUsage": 0
    }
  ],
  "totalAvailable": 1
}
[2025-10-10T19:32:40.154Z] DEBUG [FinancialDataService] Starting API call: Financial Modeling Prep_getMarketData
Metadata: {
  "timeout": 15000,
  "retries": 1
}
📦 Using cached company info for NVDA (24h cache)
✅ Historical cache HIT: NVDA latest
[2025-10-10T19:32:40.406Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getMarketData completed in 252ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getMarketData",
  "duration": 252,
  "attempts": 1
}
[2025-10-10T19:32:40.406Z] DEBUG [FinancialDataService] Performance: getMarketData completed in 252ms
Metadata: {
  "type": "performance",
  "operation": "getMarketData",
  "duration": 252,
  "attempts": 1
}
[2025-10-10T19:32:40.408Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 254ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 254,
  "attempts": 1
}
[2025-10-10T19:32:40.408Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getStockPrice completed in 254ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getStockPrice",
  "duration": 254,
  "symbol": "NVDA",
  "source": "Financial Modeling Prep"
}
[2025-10-10T19:32:40.408Z] DEBUG [FMPCacheManager] Cache entry set for fmp:stock_price:NVDA
Metadata: {
  "dataType": "stock_price",
  "ttl": "60s",
  "compressed": false,
  "size": "0.3KB"
}
[2025-10-10T19:32:40.408Z] DEBUG [FinancialDataService] Stock price cached for NVDA
Metadata: {
  "ttl": "60s"
}
[2025-10-10T19:32:40.408Z] DEBUG [FinancialDataService] Performance: getStockPrice completed in 255ms
Metadata: {
  "type": "performance",
  "operation": "getStockPrice",
  "duration": 255,
  "attempts": 1
}
[2025-10-10T19:32:40.411Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T19:32:40.420Z] WARN [api.financial-modeling-prep] Invalid ratios response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T19:32:40.420Z] WARN [api.financial-modeling-prep] Invalid metrics response structure
Metadata: {
  "errors": [
    "Invalid response data structure"
  ],
  "symbol": "NVDA"
}
[2025-10-10T19:32:40.420Z] DEBUG [api.financial-modeling-prep] Performance: getFundamentalRatios completed in 270ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 270,
  "attempts": 1
}
[2025-10-10T19:32:40.420Z] DEBUG [FinancialDataService] Performance: Financial Modeling Prep_getFundamentalRatios completed in 270ms
Metadata: {
  "type": "performance",
  "operation": "Financial Modeling Prep_getFundamentalRatios",
  "duration": 270,
  "attempts": 1
}
[2025-10-10T19:32:40.420Z] INFO [FinancialDataService] Fundamental ratios from Financial Modeling Prep for NVDA
Metadata: {
  "peRatio": "39.90",
  "pbRatio": "36.66",
  "source": "Financial Modeling Prep"
}
[2025-10-10T19:32:40.420Z] DEBUG [FinancialDataService] Performance: getFundamentalRatios completed in 271ms
Metadata: {
  "type": "performance",
  "operation": "getFundamentalRatios",
  "duration": 271,
  "attempts": 1
}
[2025-10-10T19:32:40.420Z] DEBUG [FMPCacheManager] Cache entry set for fmp:fundamental_ratios:NVDA
Metadata: {
  "dataType": "fundamental_ratios",
  "ttl": "3600s",
  "compressed": false,
  "size": "0.8KB"
}
[2025-10-10T19:32:40.420Z] DEBUG [FinancialDataService] Cached fundamental ratios for NVDA
[2025-10-10T19:32:40.513Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[2025-10-10T19:32:40.513Z] INFO [FinancialDataService] Analyst ratings from FMP for NVDA
Metadata: {
  "consensus": "Buy",
  "totalAnalysts": 79
}
Missing market data for NVDA - continuing with available data
Enhanced factors for utilization: [fundamentalScore, technicalScore, technicalAnalysis, technical, put_call_ratio_score]
Primary factors extracted for NVDA: [
  'fundamentalScore',
  'technicalScore',
  'technicalAnalysis',
  'technical',
  'put_call_ratio_score'
]
📈 Options analysis completed for NVDA: P/C ratio 0.19080865044624523
🔍 ESD Check for NVDA: includeEarlySignal=true
⏭️ ESD skipped for NVDA (feature not enabled in request options)
🔍 Price Prediction Check for NVDA: includePricePrediction=undefined
⏭️ Price Prediction skipped for NVDA (feature not enabled in request options)
🔍 Sentiment-Fusion Check for NVDA: includeSentimentFusion=true
⏭️ Sentiment-Fusion skipped for NVDA (feature not enabled in request options)
📊 Analyst Consensus Data: {
  consensus: 'Buy',
  sentimentScore: 3.7,
  totalAnalysts: 79,
  distribution: { strongBuy: 2, buy: 58, hold: 16, sell: 3, strongSell: 0 },
  percentages: { buy: '75.9', hold: '20.3', sell: '3.8' },
  baseRecommendation: 'BUY',
  normalizedScore: 0.7459936984091335
}
🚀 UPGRADE: BUY → STRONG_BUY (sentiment: 3.7, buy%: 75.9)
🔍 Service utilization for technicalAnalysis: 1/1 = 100%
🔍 Service utilization for fundamentals: 1/1 = 100%
🔍 Service utilization for macroeconomicAnalysis: 1/1 = 100%
🔍 Service utilization for sentimentAnalysis: 1/1 = 100%
🔍 Service utilization for vwapAnalysis: 1/1 = 100%
🔍 vwapAnalysis utilization debug: 1/1 stocks detected
  NVDA: relevant factors: [ 'vwap_deviation_score', 'vwap_trading_signals' ]
    vwap_deviation_score: 0.9 (neutral=0.5, used=true)
    vwap_trading_signals: 0.36 (neutral=0.5, used=true)
🔍 Service utilization for esgAnalysis: 1/1 = 100%
🔍 Service utilization for shortInterestAnalysis: 1/1 = 100%
🔍 shortInterestAnalysis utilization debug: 1/1 stocks detected
  NVDA: relevant factors: [ 'short_interest_composite' ]
    short_interest_composite: 0.50125 (neutral=0.5, used=true)
🔍 Service utilization for optionsAnalysis: 1/1 = 100%
Actual cache hit rate: 0/0 = 0.0%
[2025-10-10T19:32:40.517Z] DEBUG [MLEnhancedStockSelectionService] Extracting features for 1 symbols
📰 Analyzing sentiment impact for NVDA (Technology)
[2025-10-10T19:32:40.555Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T19:32:40.556Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T19:32:40.586Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 60 earnings records for NVDA
[FeatureExtractor] Sample earnings date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for NVDA: 61.19%
[FeatureExtractor] Got 40 quarterly income statements for NVDA
[FeatureExtractor] Sample income date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for NVDA: -13.44% (recent: 33.24%, prev: 46.68%)
[2025-10-10T19:32:40.645Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T19:32:40.660Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
Feature extraction for NVDA completed in 143ms
[2025-10-10T19:32:40.660Z] DEBUG [MLEnhancedStockSelectionService] Feature extraction completed in 143ms
[2025-10-10T19:32:40.660Z] INFO [RealTimePredictionEngine] [predictEnsemble] Starting ensemble prediction for NVDA
[2025-10-10T19:32:40.672Z] DEBUG [ModelRegistry] Listed 3 models
Metadata: {
  "latency": 11,
  "filter": {
    "status": "deployed"
  }
}
[2025-10-10T19:32:40.672Z] INFO [RealTimePredictionEngine] [predictEnsemble] Found 3 deployed models
Metadata: {
  "models": [
    "sentiment-fusion v1.1.0",
    "price-prediction v1.1.0",
    "early-signal v1.0.0"
  ]
}
[2025-10-10T19:32:40.673Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running sentiment-fusion v1.1.0
[2025-10-10T19:32:40.673Z] DEBUG [api.polygon] Fetching news from Polygon
Metadata: {
  "ticker": "NVDA",
  "dateRange": {
    "from": "2025-10-03",
    "to": "2025-10-10"
  },
  "limit": 100
}
[2025-10-10T19:32:40.675Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running price-prediction v1.1.0
[2025-10-10T19:32:40.675Z] DEBUG [RealTimePredictionEngine] [predictEnsemble] Running early-signal v1.0.0
📰 Analyzing sentiment impact for NVDA (Technology)
✅ Historical cache HIT: NVDA 2025-10-10
✅ Historical cache HIT: NVDA 2025-10-10
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: NVDA latest
✅ Historical cache HIT: SPY latest
✅ Historical cache HIT: ^VIX latest
📊 Returning cached macro context (5ms)
✅ Historical cache HIT: NVDA latest
[2025-10-10T19:32:40.707Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T19:32:40.708Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[FeatureExtractor] Got 60 earnings records for NVDA
[FeatureExtractor] Sample earnings date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Earnings surprise for NVDA: 61.19%
[2025-10-10T19:32:40.712Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
✅ Historical cache HIT: XLK latest
[PriceFeatureExtractor] Extracted 43 features for NVDA in 55ms
[2025-10-10T19:32:40.730Z] INFO [RealTimePredictionEngine] Starting Python prediction server: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/scripts/ml/predict-generic.py
[FeatureExtractor] Got 40 quarterly income statements for NVDA
[FeatureExtractor] Sample income date: 2025-07-27, asOfDate: 2025-10-10
[FeatureExtractor] Revenue growth accel for NVDA: -13.44% (recent: 33.24%, prev: 46.68%)
[2025-10-10T19:32:40.741Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
[2025-10-10T19:32:40.769Z] INFO [api.financial-modeling-prep] Got analyst consensus from FMP v4 API for NVDA
Metadata: {
  "consensus": "Buy",
  "strongBuy": 2,
  "buy": 58,
  "hold": 16,
  "sell": 3,
  "strongSell": 0
}
[2025-10-10T19:32:40.880Z] INFO [api.polygon] Successfully fetched news from Polygon
Metadata: {
  "ticker": "NVDA",
  "articleCount": 100,
  "hasNextPage": true
}
Feature extraction for NVDA completed in 207ms
[2025-10-10T19:32:40.880Z] INFO [RealTimePredictionEngine] Starting Python prediction server: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/scripts/ml/predict-generic.py
[2025-10-10T19:32:40.889Z] DEBUG [api.financial-modeling-prep] FMP returned empty array response
Feature extraction for NVDA completed in 214ms
[2025-10-10T19:32:40.889Z] INFO [RealTimePredictionEngine] Starting Python prediction server: /Users/michaellocke/WebstormProjects/Home/public/vfr-api/scripts/ml/predict-generic.py
[2025-10-10T19:32:41.715Z] INFO [RealTimePredictionEngine] Python prediction server ready
[2025-10-10T19:32:41.721Z] INFO [RealTimePredictionEngine] Python prediction server ready
[2025-10-10T19:32:41.733Z] INFO [RealTimePredictionEngine] Python prediction server ready
[2025-10-10T19:32:41.741Z] INFO [RealTimePredictionEngine] [predictEnsemble] price-prediction: BULLISH (42.3% confident)
[2025-10-10T19:32:41.741Z] INFO [RealTimePredictionEngine] [predictEnsemble] sentiment-fusion: BULLISH (42.3% confident)
[2025-10-10T19:32:41.741Z] INFO [RealTimePredictionEngine] [predictEnsemble] early-signal: BULLISH (42.3% confident)
[2025-10-10T19:32:41.742Z] INFO [RealTimePredictionEngine] [predictEnsemble] Consensus for NVDA: NEUTRAL (42.3% confident) [LOW CONSENSUS - MODELS DISAGREE]
Metadata: {
  "breakdown": {
    "bullish": 1,
    "bearish": 0,
    "neutral": 0
  },
  "votes": [
    "sentiment-fusion: BULLISH",
    "price-prediction: BULLISH",
    "early-signal: BULLISH"
  ],
  "lowConsensus": true
}
[2025-10-10T19:32:41.742Z] DEBUG [MLEnhancedStockSelectionService] Fetched 1/1 ML predictions
[2025-10-10T19:32:41.742Z] DEBUG [EnhancedScoringEngine] ML confidence 0.423066654870826 below threshold 0.5, using reduced weight
[2025-10-10T19:32:41.742Z] DEBUG [EnhancedScoringEngine] ML confidence 0.423066654870826 below threshold 0.5, using reduced weight
[2025-10-10T19:32:41.743Z] INFO [MLEnhancedStockSelectionService] ML enhancement completed: 1 predictions, 76984ms latency
📊 Progress update: complete 100%
✅ Comprehensive analysis completed in 76985ms { success: true, topSelections: 1, analysisInputServices: 11 }
🔍 DEBUG factorScores for NVDA: {
  "composite": 0.7459936984091335,
  "technical_overall_score": 0.33,
  "technicalScore": 33,
  "quality_composite": 0.9814040111111111,
  "fundamentalScore": 50,
  "analystScore": 0.7133544303797468,
  "momentum_composite": 0.6179148210138796,
  "value_composite": 0.13358706833333334,
  "volatility_30d": 0.6965811121508242,
  "sentiment_composite": 0.6117619989367359,
  "vwap_deviation_score": 0.9,
  "vwap_trading_signals": 0.36,
  "macroeconomic_sector_impact": 0.9,
  "macroeconomic_composite": 1,
  "esg_composite": 0.63,
  "short_interest_composite": 0.50125,
  "extended_market_composite": 0.917,
  "options_composite": 0.7468653787605303,
  "put_call_ratio_score": 1.003676539821502,
  "options_flow_score": 0.73741305,
  "iv_percentile_score": 0.625
}
🔍 DEBUG overallScore: 0.7303829387433453
✅ API /stocks/analyze: Display score = 73.04 (formatted from 0.7304)
 POST /api/stocks/analyze 200 in 78577ms
[2025-10-10T19:32:41.752Z] ERROR [PredictionLogger] Failed to log prediction for NVDA: invalid input syntax for type uuid: "early_signal_1w"
[2025-10-10T19:32:41.752Z] ERROR [PredictionLogger] Failed to log prediction for NVDA: invalid input syntax for type uuid: "early_signal_1w"
 GET /api/stocks/analyze/progress/session_1760124683165_h4sl1hfct 200 in 78590ms
❌ SSE connection closed for session: session_1760124683165_h4sl1hfct
🔧 Admin access granted in development mode
 GET /api/admin/ml-feature-toggles 200 in 11ms
